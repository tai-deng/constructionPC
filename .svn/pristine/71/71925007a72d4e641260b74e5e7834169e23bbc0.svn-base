<!-- setting 自动新建设置 -->
<template>
  <div class="setting-container" v-if="isShow">
    <el-form :model="fromData" class="setting-container">
      <div class="setting-content">
        <template v-if="step==1">
          <div class="stepOne">
            <div class="stepOne-title flex-row">
              <div class="stepOne-title-name flex-row">楼层类型</div>
              <div class="stepOne-title-describe flex-row">描述</div>
              <div class="stepOne-title-handle flex-row">操作</div>
            </div>
            <div class="stepOne-item flex-row" v-for="(item,index) in fromData.one" :key="index">
              <div class="stepOne-title-name">
                <el-input v-model="item['type'+index]" placeholder="楼层类型"></el-input>
              </div>
              <div class="stepOne-title-describe">
                <el-input v-model="item['describe'+index]" placeholder="描述"></el-input>
              </div>
              <div class="stepOne-title-handle flex-row">
                <div class="addImg" @click="onOneAddItem(index)" v-if="index==0">
                  <img src="../../../../../assets/imgs/add.png">
                </div>
                <div class="delImg" @click="onOneDelItem(index)" v-else>
                  <img src="../../../../../assets/imgs/del_model.png">
                </div>
              </div>
            </div>
          </div>
        </template>
        <template v-else-if="step==2">
          <div class="stepOne">
            <div class="stepOne-title flex-row">
              <div class="stepOne-title-nameb flex-row">工序名称</div>
              <div class="stepOne-title-describe flex-row">描述</div>
              <div class="stepOne-title-nameb flex-row">模型匹配</div>
              <div class="stepOne-title-handle flex-row">操作</div>
            </div>
            <div class="stepOne-item flex-row" v-for="(item,index) in fromData.two" :key="index">
              <div class="stepOne-title-nameb">
                <el-input v-model="item['base'+index]" placeholder="基础工程"></el-input>
              </div>
              <div class="stepOne-title-describe">
                <el-input v-model="item['describe'+index]" placeholder="描述文字"></el-input>
              </div>
              <div class="stepOne-title-nameb">
                <el-input v-model="item['mode'+index]" placeholder="模型匹配"></el-input>
              </div>
              <div class="stepOne-title-handle flex-row">
                <div class="addImg" @click="onOneAddItem(index)" v-if="index==0">
                  <img src="../../../../../assets/imgs/add.png">
                </div>
                <div class="delImg" @click="onOneDelItem(index)" v-else>
                  <img src="../../../../../assets/imgs/del_model.png">
                </div>
              </div>
            </div>
          </div>
        </template>
        <template v-else-if="step==3">
          <div class="setting-tab">
            <div class="setting-tab-head flex-row">
              <div class="tab-col-warp flex-row">
                <div class="setting-tab-head-angle flex-row">楼层类型/工序</div>
              </div>
              <div class="flex-row flex-1">
                <div
                  class="tab-col-warp flex-1 flex-row"
                  v-for="(item,index) in fromData.three.head"
                  :key="index"
                >
                  <div class="flex-1 flex-row setting-tab-head-item">{{item['type'+index]}}</div>
                </div>
              </div>
              <div class="tab-col-warp flex-row">
                <div class="setting-tab-head-operate flex-row">操作</div>
              </div>
            </div>
            <div class="setting-tab-body">
              <div
                class="setting-tab-body-item flex-row"
                v-for="(item,index) in fromData.three.body"
                :key="index"
              >
                <div class="tab-col-warp flex-row w108">
                  <div class="setting-tab-body-item-name flex-row">{{item.name}}</div>
                </div>
                <div
                  class="setting-tab-body-item-col-i flex-row tab-col-warp flex-1"
                  v-for="(col,i) in item.data"
                  :key="i"
                >
                  <div
                    class="setting-tab-body-item-input flex-row flex-1"
                    @click="onFocus(index,i)"
                  >
                    <el-input
                      v-model="col['v'+i]"
                      :placeholder="col['v'+i]"
                      :class="[col['isClick']?'isClick':'isClickb']"
                    ></el-input>
                    <div class="a" v-if="!col['isClick']">{{col['v'+i]}}</div>
                  </div>
                </div>
                <div class="tab-col-warp flex-row w108">
                  <div class="setting-tab-body-item-rm flex-row" @click="onRemove(index)">移除</div>
                </div>
              </div>
            </div>
          </div>
        </template>
        <template v-else-if="step==4">
          <div class="stepOne">
            <div class="stepOne-title flex-row">
              <div class="stepOne-title-describe flex-row">节点名称</div>
              <div class="stepOne-title-describe flex-row">前置</div>
              <div class="stepOne-title-describe flex-row">技术间隔时间</div>
              <div class="stepOne-title-describe flex-row">关联工序</div>
              <div class="stepOne-title-handle flex-row">操作</div>
            </div>
            <div class="stepOne-item flex-row" v-for="(item,index) in fromData.four" :key="index">
              <div class="stepOne-title-describe">
                <el-input v-model="item['nodeName'+index]" placeholder="描述文字"></el-input>
              </div>
              <div class="stepOne-title-describe">
                <el-input v-model="item['ago'+index]" placeholder="描述文字"></el-input>
              </div>
              <div class="stepOne-title-describe">
                <el-input v-model="item['interval'+index]" placeholder="描述文字"></el-input>
              </div>
              <div class="stepOne-title-describe">
                <el-select v-model="item['optionValue'+index]" placeholder="请选择">
                  <el-option
                    v-for="v in item['options'+index]"
                    :key="v.value"
                    :label="v.label"
                    :value="v.value"
                  ></el-option>
                </el-select>
              </div>
              <div class="stepOne-title-handle flex-row">
                <div class="addImg" @click="onOneAddItem(index)" v-if="index==0">
                  <img src="../../../../../assets/imgs/add.png">
                </div>
                <div class="delImg" @click="onOneDelItem(index)" v-else>
                  <img src="../../../../../assets/imgs/del_model.png">
                </div>
              </div>
            </div>
          </div>
        </template>
      </div>
      <div class="tab-sub-btn flex-row">
        <div class="cancel flex-row" @click="onLastStep">上一步</div>
        <div class="affirm flex-row" @click="submit">{{step==4?"确定":'下一步'}}</div>
      </div>
    </el-form>
  </div>
</template>

<script>
export default {
  props: ["isShow"],
  data() {
    return {
      step: 1,
      fromData: {
        one: [
          {
            type0: "", // 楼层类型
            describe0: "" // 楼层描述
          }
        ],
        two: [
          {
            base0: "",
            describe0: "",
            mode0: ""
          }
        ],
        three: { head: [], body: [] },
        four: [
          {
            nodeName0: "",
            ago0: "",
            interval0: "",
            options0: [
              {
                value: "选项1",
                label: "黄金糕"
              },
              {
                value: "选项2",
                label: "双皮奶"
              },
              {
                value: "选项3",
                label: "蚵仔煎"
              }
            ],
            optionValue0: ""
          }
        ]
      }
    };
  },
  methods: {
    // 第一步 添加
    onOneAddItem() {
      let lenth = 0;
      if (this.step == 1) {
        lenth = this.fromData.one.length;
        this.fromData.one.push({
          ["type" + lenth]: "",
          ["describe" + lenth]: ""
        });
      } else if (this.step == 2) {
        lenth = this.fromData.two.length;
        this.fromData.two.push({
          ["base" + lenth]: "",
          ["describe" + lenth]: "",
          ["mode" + lenth]: ""
        });
      } else if (this.step == 4) {
        lenth = this.fromData.four.length;
        this.fromData.four.push({
          ["nodeName" + length]: "",
          ["ago" + length]: "",
          ["interval" + length]: "",
          ["options" + length]: [
            {
              value: "选项1",
              label: "黄金糕"
            },
            {
              value: "选项2",
              label: "双皮奶"
            },
            {
              value: "选项3",
              label: "蚵仔煎"
            }
          ],
          ["optionValue" + length]: ""
        });
      }
    },
    // 第一步 删除
    onOneDelItem(i) {
      if (this.step == 1) {
        this.fromData.one.splice(i, 1);
      } else if (this.step == 2) {
        this.fromData.two.splice(i, 1);
      } else if (this.step == 4) {
        this.fromData.four.splice(i, 1);
      }
    },
    // 上一步
    onLastStep() {
      if (this.step > 1) {
        this.step = this.step - 1;
      }
      this.onTitle();
    },
    // 下一步
    onNextStep() {
      if (this.step < 4) {
        this.step = this.step + 1;
      }
      this.onTitle();
    },
    // 设置标题
    onTitle() {
      let c = this.step;
      if (c == 1) {
        this.$emit("onSetTile", "楼层类型定义");
      } else if (c == 2) {
        this.$emit("onSetTile", "工序定义");
      } else if (c == 3) {
        this.$emit("onSetTile", "时间定义");
      } else if (c == 4) {
        this.$emit("onSetTile", "标准工序定义");
      }
    },
    // 提交
    submit() {
      let step = this.step;
      let fdOne = this.fromData.one;
      let fdTwo = this.fromData.two;
      let fdThree = this.fromData.three;
      let fdFour = this.fromData.four;
      if (step == 1) {
        let v = fdOne;
        let flag = true;
        fdOne.forEach((el, index) => {
          if (!el["type" + index]) {
            flag = false;
          }
        });
        console.log(v);
        if (flag) {
          this.onNextStep();
        } else {
          this.$message({
            message: "请填写类型名称",
            type: "error",
            center: "true"
          });
        }
      } else if (step == 2) {
        let v = fdTwo;
        let flag = true;
        fdTwo.forEach((el, index) => {
          if (!el["base" + index]) {
            flag = false;
          }
        });
        if (flag) {
          fdOne.forEach((el, index) => {
            this.fromData.three.head.push(el);
          });

          fdTwo.forEach((el, i) => {
            let item = new Object({ name: "", data: [] });
            item.name = el["base" + i];

            fdOne.forEach((element, index) => {
              item.data.push({ ["v" + index]: "0" });
            });

            console.log(el, item);

            this.fromData.three.body.push(item);
          });

          this.onNextStep();
        } else {
          this.$message({
            message: "请填写工序名称",
            type: "error",
            center: "true"
          });
        }
        console.log(v, this.fromData.three);
      } else if (step == 3) {
        let v = fdFour;
        console.log(v);
        this.onNextStep();
      } else if (step == 4) {
        let v = fdThree;
        this.$emit("onClose", false);
        this.step = 1;
        this.$emit("onSetTile", "新增进度方案");
      }
    },
    // 移除
    onRemove(i) {
      console.log("移除", i);
      this.fromData.three.body.splice(i, 1);
    },
    // 获取焦点
    onFocus(index, i) {
      console.log(index, i, this.fromData.three.body);
      let data = this.fromData.three.body;
      let arr = [];
      data.forEach((element, index) => {
        element.data.forEach((el, i) => {
          data[index].data[i]["isClick"] = false;
        });
        arr.push(element);
      });
      arr[index].data[i]["isClick"] = true;
      this.fromData.three.body = arr;
    }
  }
};
</script>
<style>
.setting-content .el-input__suffix {
  width: 50px;
  height: 40px;
  background: rgba(67, 80, 137, 1);
  border-radius: 0px 4px 4px 0px;
  right: 0px;
}
.setting-content .el-input__suffix .el-select__caret {
  color: #ffffff;
}
</style>

<style scoped lang='stylus'>
@import './base.css';

.setting-container {
  width: 100%;
  height: 94%;

  .setting-content {
    height: 80%;
    padding: 0 30px;
    overflow-y: auto;

    .el-input__suffix {
      width: 50px;
      height: 40px;
      background: rgba(67, 80, 137, 1);
      border-radius: 0px 4px 4px 0px;
    }

    .setting-tab {
      background-color: rgba(244, 246, 255, 1);

      .tab-col-warp {
        padding: 0 15px;
        height: 50px;
      }

      .w108 {
        width: 108px;
      }

      .setting-tab-body {
        .setting-tab-body-item {
          font-size: 18px;

          .setting-tab-body-item-rm {
            width: 108px;
            height: 50px;
            font-family: SourceHanSansCN-Normal;
            font-weight: 400;
            color: rgba(71, 117, 202, 1);
            border-bottom: 1px solid #C5CAD7;
          }

          .setting-tab-body-item-name {
            width: 108px;
            height: 50px;
            border-bottom: 1px solid #C5CAD7;
            font-family: SourceHanSansCN-Medium;
            font-weight: 500;
            color: rgba(51, 51, 51, 1);
          }

          .setting-tab-body-item-col-i {
            background: rgba(234, 237, 250, 1);
            font-family: SourceHanSansCN-Normal;
            font-weight: 400;
            color: rgba(51, 51, 51, 1);

            .setting-tab-body-item-input {
              border-bottom: 1px solid #C5CAD7;
              height: 50px;
              text-align: center;

              .isClick {
                .el-input__inner {
                  text-align: center;
                }
              }

              .isClickb {
                display: none;

                .el-input__inner {
                  text-align: center;
                }
              }
            }
          }
        }
      }

      .setting-tab-head {
        .setting-tab-head-angle {
          width: 108px;
          height: 50px;
          font-size: 12px;
          font-family: SourceHanSansCN-Normal;
          font-weight: 400;
          color: rgba(51, 51, 51, 1);
          border-bottom: 1px solid #1E2637;
        }

        .setting-tab-head-item {
          font-size: 18px;
          font-family: SourceHanSansCN-Medium;
          font-weight: 500;
          color: rgba(51, 51, 51, 1);
          border-bottom: 1px solid #1E2637;
          height: 50px;
        }

        .setting-tab-head-operate {
          width: 108px;
          height: 50px;
          font-size: 18px;
          font-family: SourceHanSansCN-Medium;
          font-weight: 500;
          color: rgba(51, 51, 51, 1);
          border-bottom: 1px solid #1E2637;
        }
      }
    }

    .stepOne-item {
      margin-top: 15px;
    }

    .stepOne-title-name {
      width: 290px;
    }

    .stepOne-title-nameb {
      width: 220px;
    }

    .stepOne-title-describe {
      flex: 1;
      margin: 0 13px 0 20px;
    }

    .stepOne-title-handle {
      width: 54px;

      .addImg img {
        width: 54px;
        height: 54px;
        display: block;
      }

      .delImg img {
        width: 50px;
        height: 50px;
        display: block;
      }
    }

    .stepOne-title {
      border-bottom: 1px solid #E5E5E5;
      height: 50px;
      font-size: 18px;
      font-family: SourceHanSansCN-Medium;
      font-weight: 500;
      color: rgba(51, 51, 51, 1);
    }
  }
}

.tab-sub-btn {
  font-size: 16px;
  font-family: SourceHanSansCN-Medium;
  font-weight: 500;
  color: rgba(255, 255, 255, 1);
  margin-top: 23px;

  .cancel {
    background: rgba(153, 153, 153, 1);
    width: 120px;
    height: 50px;
    box-shadow: 0px 2px 4px 0px rgba(161, 192, 250, 1);
    border-radius: 4px;
  }

  .affirm {
    background: rgba(71, 117, 202, 1);
    width: 120px;
    height: 50px;
    box-shadow: 0px 2px 4px 0px rgba(161, 192, 250, 1);
    border-radius: 4px;
    margin-left: 20px;
  }
}
</style>
