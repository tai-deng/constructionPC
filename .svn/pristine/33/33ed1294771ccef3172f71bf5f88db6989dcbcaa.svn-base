<template>
  <div class="container-procurement container-procurement-list">
    <div class="leftBox" v-show="isShow">
      <div class="box-card">
        <div class="title">
          <div class="tree_img">
            <img src="../../../assets/imgs/order_tree.png" alt>
          </div>
          <div class="tex-one">{{rowData.BuildName}} {{rowData.ResourceName}}</div>
          <div class="tex-two">施工预算量：{{rowData.AdjustBOQ}}</div>
          <div
            class="tex-two"
          >入库：{{rowData.putList[0]["InSumNum"]}}出库：{{rowData.outList[0]["OutSumNum"]}}退还：{{rowData.backList[0]["BackSumNum"]}}</div>
        </div>
        <button :class="['button']" @click.prevent="onClose">
          <i :class="['el-icon-caret-left']"></i>
        </button>
        <!-- 模型box -->
        <div class="model-container">
          <div ref="modelContainer" class="model-container"></div>
        </div>
      </div>
    </div>
    <!-- <div class="rightBox"> -->
    <el-form :inline="true" :model="formInline" class="demo-form-inline" style="text-align: right;">
      <el-form-item>
        <el-select v-model="formInline.BuildName" placeholder="楼栋">
          <el-option
            v-for="item in BuildNameList"
            :key="item.id"
            :label="item.text"
            :value="item.text"
          ></el-option>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-select v-model="formInline.Specialty" placeholder="专业">
          <el-option
            v-for="item in SpecialtyList"
            :key="item.id"
            :label="item.text"
            :value="item.text"
          ></el-option>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-select v-model="formInline.Floor" placeholder="楼层">
          <el-option
            v-for="item in FloorbyList"
            :key="item.id"
            :label="item.text"
            :value="item.text"
          ></el-option>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-select v-model="formInline.CatagoryName" placeholder="物资类别">
          <el-option
            v-for="item in ResorceNameList"
            :key="item.id"
            :label="item.text"
            :value="item.text"
          ></el-option>
        </el-select>
      </el-form-item>
      <el-form-item class="ser-bg">
        <el-input
          placeholder="楼栋、专业、楼层、物资"
          prefix-icon="el-icon-search"
          v-model="formInline.Name"
          validate-event
        ></el-input>
      </el-form-item>
      <el-form-item class="bgeee">
        <el-button type="warning" class @click="onSubmit">导出</el-button>
      </el-form-item>
    </el-form>
    <el-table :data="tableData" :span-method="objectSpanMethod" style="width: 100%">
      <el-table-column prop="num" label="序号" width="50"></el-table-column>
      <el-table-column prop="ResourceName" label="物资名称"></el-table-column>
      <el-table-column prop="Spec" label="规格型号"></el-table-column>
      <el-table-column prop="BuildName" label="楼栋"></el-table-column>
      <el-table-column prop="Floor" label="楼层"></el-table-column>
      <el-table-column prop="AdjustBOQ" label="施工预算量"></el-table-column>
      <el-table-column label="入库" align="right">
        <template slot="header" slot-scope="scope">
          <div class="box">
            <span class="tableBox" @click="put(scope.row)">
              <i class="el-icon-circle-plus-outline"></i>
            </span>
            <span class="tableBox">入库</span>
          </div>
        </template>
        <el-table-column label="入库时间">
          <template slot-scope="scope">
            <div
              class="in-date"
              v-for="(item,index) in tableData[scope.$index].putList"
              :key="index"
            >{{item.InDate}}</div>
          </template>
        </el-table-column>
        <el-table-column label="入库量">
          <template slot-scope="scope">
            <div
              class="in-num"
              v-for="(item,index) in tableData[scope.$index].putList"
              :key="index"
            >{{item.CurrentInNum}}</div>
          </template>
        </el-table-column>
        <el-table-column label="总量">
          <template slot-scope="scope">
            <div
              class="in-sum"
              v-for="(item,index) in tableData[scope.$index].putList"
              :key="index"
            >{{item.InSumNum}}</div>
          </template>
        </el-table-column>
      </el-table-column>

      <el-table-column label="出库">
        <template slot="header" slot-scope="scope">
          <div class="box">
            <span class="tableBox" @click="out(scope.row)">
              <i class="el-icon-circle-plus-outline"></i>
            </span>
            <span class="tableBox">出库</span>
          </div>
        </template>
        <el-table-column label="出库时间">
          <template slot-scope="scope">
            <div
              class="in-date"
              v-for="(item,index) in tableData[scope.$index].outList"
              :key="index"
            >{{item.OutDate}}</div>
          </template>
        </el-table-column>
        <el-table-column label="出库量">
          <template slot-scope="scope">
            <div
              class="in-num"
              v-for="(item,index) in tableData[scope.$index].outList"
              :key="index"
            >{{item.ThisOutNum}}</div>
          </template>
        </el-table-column>
        <el-table-column label="总量">
          <template slot-scope="scope">
            <div
              class="in-sum"
              v-for="(item,index) in tableData[scope.$index].outList"
              :key="index"
            >{{item.OutSumNum}}</div>
          </template>
        </el-table-column>
      </el-table-column>
      <el-table-column label="退还">
        <template slot="header" slot-scope="scope">
          <div class="box">
            <span class="tableBox" @click="back(scope.row)">
              <i class="el-icon-circle-plus-outline"></i>
            </span>
            <span class="tableBox">退还</span>
          </div>
        </template>
        <el-table-column label="退还时间">
          <template slot-scope="scope">
            <div
              class="in-date"
              v-for="(item,index) in tableData[scope.$index].backList"
              :key="index"
            >{{item.BackDate}}</div>
          </template>
        </el-table-column>
        <el-table-column label="退还量">
          <template slot-scope="scope">
            <div
              class="in-num"
              v-for="(item,index) in tableData[scope.$index].backList"
              :key="index"
            >{{item.ThisBackNum}}</div>
          </template>
        </el-table-column>
        <el-table-column label="总量">
          <template slot-scope="scope">
            <div
              class="in-sum"
              v-for="(item,index) in tableData[scope.$index].backList"
              :key="index"
            >{{item.BackSumNum}}</div>
          </template>
        </el-table-column>
      </el-table-column>
      <el-table-column prop="StoreNum">
        <template slot="header">
          <div class="line0" style="margin-bottom:10px">库存</div>
          <div class="line0">入库－出库＋退还</div>
        </template>
      </el-table-column>
      <el-table-column prop="OverNum" label="节超" width="130">
        <template slot="header" slot-scope="scope">
          <div class="line0" style="margin-bottom:10px">
            节超
            <el-tooltip class="item" effect="dark" content="出库－退还－预算" placement="bottom">
              <span>
                差额
                <i @click="onView(scope.row)" class="el-icon-question"></i>
              </span>
            </el-tooltip>
          </div>
          <div class="line0">出库－退还－预算</div>
        </template>
      </el-table-column>
      <el-table-column label="定位">
        <template slot-scope="scope">
          <i class="el-icon-location" @click="onLocation(scope.row)"></i>
        </template>
      </el-table-column>
    </el-table>
    <el-pagination
      class="pagination"
      background
      layout="prev, pager, next"
      :total="total"
      :page-size="paging.rows"
      prev-text="上一页"
      next-text="下一页"
      @current-change="onCurrentChange"
      @prev-click="onPrev"
      @next-click="onNext"
      :current-page.sync="paging.page"
    ></el-pagination>
    <!-- </div> -->
  </div>
</template>
<script type='textecmascript-6'>
import {
  GetBuilding,
  GetSpecialtybyBuilding,
  GetFloorbyBuilding,
  GetAllElementName,
  QueryPurchaseSumList,
  ExportPurchaseSumList
} from "../../../api/api.js";
import { mapMutations } from "vuex";

export default {
  data() {
    return {
      rowData: {
        putList: [{ InSumNum: "" }],
        outList: [{ OutSumNum: "" }],
        backList: [{ BackSumNum: "" }]
      },
      isShow: false,
      paging: { page: 1, rows: 12 },
      projectid: localStorage.getItem("projectid"),
      BuildNameList: [], // 楼栋下拉
      SpecialtyList: [], // 专业下拉
      FloorbyList: [], // 楼层下拉
      ResorceNameList: [], // 物资名称下拉
      formInline: {
        BuildName: "", // 楼栋
        Specialty: "", // 专业
        Floor: "", // 楼层
        CatagoryName: "", // 物资类别
        Name: "" // 查询内容
      },
      tableData: [],
      total: 0
    };
  },
  created() {
    this._initData();
    // 楼栋下拉
    this.getBuildingSel();
    // 获取采购汇总列表
    this.getCollectList();
  },
  computed: {},
  watch: {
    formInline: {
      handler(val, oldval) {
        this.getCollectList(val);
      },
      deep: true
    },
    // 楼层
    "formInline.Floor": {
      handler(val, oldval) {
        this.getCatagoryNameSel(
          this.formInline.BuildName,
          this.formInline.Specialty,
          val
        );
      }
    },
    // 专业
    "formInline.Specialty": {
      handler(val, oldval) {
        this.getFloorbySel(this.formInline.BuildName, val);
      }
    },
    // 楼栋
    "formInline.BuildName": {
      handler(val, oldval) {
        this.getSpecialtySel(val);
      }
    }
  },
  methods: {
    // 获取采购汇总列表
    getCollectList(par = {}) {
      QueryPurchaseSumList(Object.assign(par, this.paging)).then(res => {
        if (res.StatusCode == 200) {
          let data = [];
          this.total = Number(res.Count);
          res.Detiel.forEach((el, i) => {
            let isHave = data.some(v => {
              return v.RowNum == el.RowNum;
            });
            if (isHave) {
              data.forEach((ele, ind) => {
                if (ele.RowNum == el.RowNum) {
                  this.pushItem(data, ind, el);
                }
              });
            } else {
              this.pushData(data, el);
            }
          });
          this.tableData = data.map((item, i) => {
            return Object.assign(item, { num: i + 1 });
          });
          console.log(data);
        }
      });
    },
    pushData(data, el) {
      data.push({
        RowNum: el.RowNum ? el.RowNum : "/",
        ResourceName: el.ResourceName ? el.ResourceName : "/",
        Spec: el.Spec ? el.Spec : "/",
        BuildName: el.BuildName ? el.BuildName : "/",
        Floor: el.Floor ? el.Floor : "/",
        AdjustBOQ: el.AdjustBOQ ? el.AdjustBOQ : "/",
        putList: [
          {
            InDate: el.InDate
              ? require("moment")(el.InDate).format("YYYY/MM/DD")
              : "/",
            CurrentInNum: el.CurrentInNum ? el.CurrentInNum : "/",
            InSumNum: el.InSumNum ? el.InSumNum : "/"
          }
        ],
        outList: [
          {
            OutDate: el.OutDate
              ? require("moment")(el.OutDate).format("YYYY/MM/DD")
              : "/",
            ThisOutNum: el.ThisOutNum ? el.ThisOutNum : "/",
            OutSumNum: el.OutSumNum ? el.OutSumNum : "/"
          }
        ],
        backList: [
          {
            BackDate: el.BackDate
              ? require("moment")(el.BackDate).format("YYYY/MM/DD")
              : "/",
            ThisBackNum: el.ThisBackNum ? el.ThisBackNum : "/",
            BackSumNum: el.BackSumNum ? el.BackSumNum : "/"
          }
        ],
        StoreNum: el.StoreNum ? el.StoreNum : "/",
        OverNum: el.OverNum ? el.OverNum : "/"
      });
    },
    pushItem(data, ind, el) {
      data[ind].putList.push({
        InDate: el.InDate
          ? require("moment")(el.InDate).format("YYYY/MM/DD")
          : "/",
        CurrentInNum: el.CurrentInNum ? el.CurrentInNum : "/",
        InSumNum: el.InSumNum ? el.InSumNum : "/"
      });
      data[ind].outList.push({
        OutDate: el.OutDate
          ? require("moment")(el.OutDate).format("YYYY/MM/DD")
          : "/",
        ThisOutNum: el.ThisOutNum ? el.ThisOutNum : "/",
        OutSumNum: el.OutSumNum ? el.OutSumNum : "/"
      });
      data[ind].backList.push({
        BackDate: el.BackDate
          ? require("moment")(el.BackDate).format("YYYY/MM/DD")
          : "/",
        ThisBackNum: el.ThisBackNum ? el.ThisBackNum : "/",
        BackSumNum: el.BackSumNum ? el.BackSumNum : "/"
      });
    },
    // 选中页
    onCurrentChange(p) {
      this.paging.page = p;
      this.getCollectList();
    },
    // 上一页
    onPrev(p) {
      console.log(p);
    },
    // 下一页
    onNext(p) {
      console.log(p);
    },
    // 物资类别下拉
    getCatagoryNameSel(buildname, specialty, floor) {
      GetAllElementName({
        projectid: this.projectid,
        buildname,
        specialty,
        floor
      }).then(res => {
        if (res.StatusCode == 200) {
          this.ResorceNameList = res.Detiel;
        }
      });
    },
    // 楼层下拉
    getFloorbySel(building, Specialty) {
      GetFloorbyBuilding({
        projectid: this.projectid,
        building,
        Specialty
      }).then(res => {
        if (res.StatusCode == 200) {
          this.FloorbyList = res.Detiel;
        }
      });
    },
    // 专业下拉
    getSpecialtySel(building) {
      GetSpecialtybyBuilding({ projectid: this.projectid, building }).then(
        res => {
          if (res.StatusCode == 200) {
            this.SpecialtyList = res.Detiel;
          }
        }
      );
    },
    // 楼栋下拉
    getBuildingSel() {
      GetBuilding({ projectid: this.projectid }).then(res => {
        if (res.StatusCode == 200) {
          this.BuildNameList = res.Detiel;
        }
      });
    },
    // 材料入库
    put() {
      this.$router.push({
        path: "putStorage"
      });
    },
    // 材料出库
    out() {
      this.$router.push({
        path: "outStorage"
      });
    },
    // 退还
    back() {
      this.$router.push({
        path: "returnStorage"
      });
    },
    // 导出
    async onSubmit() {
      let par = this.formInline;
      let res = await ExportPurchaseSumList(par);
      if (res.StatusCode == 200 && res.Result != "") {
        window.open(res.Result);
      } else {
        this.$message({
          type: "error",
          message: res.message ? res.message : "后台异常",
          center: "true"
        });
      }
    },
    // 差额
    onView(p) {
      console.log(p);
    },
    // 定位
    onLocation(p) {
      this.isShow = true;
      this.rowData = p;
    },
    onClose() {
      this.isShow = false;
    },
    objectSpanMethod({ row, column, rowIndex, columnIndex }) {
      return;
      if (columnIndex === 0) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 4,
            colspan: 1
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0
          };
        }
      } else if (columnIndex === 1) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 4,
            colspan: 1
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0
          };
        }
      } else if (columnIndex === 2) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 3,
            colspan: 1
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0
          };
        }
      } else if (columnIndex === 3) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 3,
            colspan: 1
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0
          };
        }
      } else if (columnIndex === 4) {
        if (rowIndex % 4 === 0) {
          return {
            rowspan: 3,
            colspan: 1
          };
        } else {
          return {
            rowspan: 0,
            colspan: 0
          };
        }
      }
    },

    _initData() {
      /**
       * 模型状态管理
       */
      console.log("aaa");
      this.$nextTick(() => {
        this.$util.getDomLocation(this, "modelContainer").then(res => {
          console.log(res);
          this.modelBox({
            isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
            isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
            top: res.top, //距离顶部距离‘px'
            left: res.left, //距离左边距离‘px'
            width: res.width, //模型宽‘px'
            height: res.height, //模型高 ‘px'
            zIndex: 100, //模型层级
            background: "",
            ElementIDs: [], // 所有要显示的构件数组，包括半隐藏构件
            highLightElementIDs: [], // 高亮显示的构件
            functionNumber: [] // 需要模型调用的函数编号数组
          });
        });
      });
    },
    ...mapMutations({
      modelBox: "GET_MODEL_BOX"
    })
  }
};
</script>
<style lang='stylus' rel='stylesheet/stylus'>
.container-procurement .leftBox {
  width: 50%;
  height: 100%;
  position: absolute;
  top: 0;
  background: #f5f6fa;
  left: 0;
  z-index: 10;
}

.container-procurement .tex-one {
  text-align: center;
  font-size: 24px;
}

.container-procurement .tex-two {
  text-align: center;
  font-size: 18px;
  color: rgba(51, 51, 51, 1);
}

.container-procurement .tree_img>img {
  display: block;
  height: auto;
}

.container-procurement {
  .button {
    width: 160px;
    height: 20px;
    position: absolute;
    top: 50%;
    right: -20px;
    transform: translateY(-50%);
    width: 20px;
    height: 160px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 0px 6px 0 6px;
    color: #fff;
    border: none;
  }
}

.container-procurement .leftBox .box-card {
  width: calc(100% - 30px);
  height: calc(100% - 56px);
  padding: 20px 10px 20px 20px;
}

.container-procurement .model-container {
  width: 98%;
  height: calc(100% - 80px);
  padding: 0 !important;
  z-index: 90;
}

.container-procurement {
  width: 100%;
  height: 100%;
  background: #f0f2f5;
  position: relative;

  .pagination {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .in-date, .in-num, .in-sum {
    width: 75px;
    line-height: 40px;
  }
}

.container-procurement-list {
  padding: 20px;
  box-sizing: border-box;
}

.container-procurement-list .box {
  display: flex;
  flex-flow: row;
  justify-content: flex-start;
  align-items: center;
  line-height: 0 !important;
}

.container-procurement-list .box .tableBox {
  width: 50%;
  display: flex;
  justify-content: flex-start;
}

.container-procurement-list .box .tableBox i {
  font-size: 24px;
  cursor: pointer;
}

.container-procurement-list .el-input__suffix {
  width: 0.666667rem;
  background: #44508a;
  right: 0;
  border-radius: 0 0.066667rem 0.066667rem 0;
}

.container-procurement-list .el-table thead.is-group th {
  background: #44508a;
  color: #fff;
  text-align: center;
}

.container-procurement-list .el-select .el-input .el-select__caret {
  color: #fff;
}

.container-procurement-list .el-table--enable-row-transition .el-table__body td {
  text-align: center;
}

.container-procurement-list .el-button--warning {
  color: #FFF;
  background-color: #E6A23C;
  border-color: #E6A23C;
  padding: 8px 30px;
}

.container-procurement-list .bgeee {
  background: #eee;
}

.container-procurement-list .el-form--inline .el-form-item__content {
  width: 160px;
  height: 40px;
  background: rgba(255, 255, 255, 1);
  box-shadow: 0px 1px 7px 0px rgba(216, 223, 238, 0.75);
  border-radius: 4px;
  font-size: 18px;
  font-family: SourceHanSansCN-Normal;
  font-weight: 400;
}

.container-procurement-list .el-select .el-input__inner::placeholder {
  color: rgba(51, 51, 51, 1);
}

.container-procurement-list .ser-bg .el-form-item__content {
  width: 340px;
  height: 40px;
  background: rgba(255, 255, 255, 1);
  box-shadow: 0px 1px 7px 0px rgba(216, 223, 238, 0.75);
  border-radius: 20px;
}

.container-procurement-list .ser-bg .el-form-item__content .el-input__inner {
  border-radius: 20px;
}

.container-procurement-list .bgeee .el-form-item__content {
  background: #f0f2f5;
  box-shadow: none;
  width: auto;
}

.container-procurement-list .el-button--warning {
  padding: 0;
  width: 100px;
  height: 40px;
  line-height: 40px;
  background: rgba(253, 161, 67, 1);
  box-shadow: 0px 1px 7px 0px rgba(176, 148, 119, 0.75);
  border-radius: 4px;
}

.container-procurement-list .el-icon-location {
  color: #4775ca;
  box-shadow: 0px 1px 7px 0px rgba(216, 223, 238, 0.5);
}

.el-select .el-input__suffix-inner .el-select__caret::before {
  content: '\E60C';
  font-size: 0.32rem;
}

.container-procurement-list .el-table__body-wrapper .el-input__inner {
  background: #f0f0f0;
  text-align: center;
}

.line0 {
  line-height: 1 !important;
  display: block;
}
</style>