<!-- communication沟通管理 -->
<template>
  <div class="container-communication">
    <div class="wrapper">
      <el-row>
        <el-col :span="12">
          <div class="grid-content bg-purple">
            <div class="container-cost-left">
              <!-- <element-tree 
                class="treeStyle" 
                v-if="treeStatus" 
                :showSelect="true" 
                :options="options" 
                :expandedKeys="expandedKeys" 
                :checkedKeys="checkedKeys" 
                :array="array" 
                :closeShow="true"
                :defaultProps="defaultProps" 
                @GetElementTree="GetElementTree" 
                @handleCheckChange="handleCheckChange" 
                @handleNodeClick="handleNodeClick" 
                @closeHandle="closeHandle">
              </element-tree>
              <div v-else class="tree_img" @click='showTree'><img src="../../../assets/imgs/order_tree.png" alt=""></div> -->
              <el-button @click="communication()">发起沟通</el-button>
              <!-- 模型box -->
              <div class="model-container">
                <div ref="modelContainer" class="model-container"></div>
              </div>
            </div>
          </div>
        </el-col>
        <el-col :span="12">
          <div class="grid-content bg-purple-light">
            <div class="container-cost-right">
              <div class="filter-wrapper">
                <div class="table">
                  <div class="title">
                    <el-table
                    :header-cell-style="{fontSize: '18px'}">
                      <el-table-column align="left"  label="序号"  width="80"></el-table-column>
                      <el-table-column align="center"  label="类型"></el-table-column>
                      <el-table-column align="center"  label="主题"></el-table-column>
                      <el-table-column align="center"  label="发起时间"></el-table-column>
                      <el-table-column align="center" label="状态"></el-table-column>
                      <el-table-column align="center"  label="定位"  width="80">
                      </el-table-column>
                    </el-table>
                  </div>
                  <div class="content">
                    <el-collapse v-model="nowCollapse" >
                      <el-collapse-item :title="`待接收（${ingPageTotal}）`" name="1">
                        <el-table
                          :data="dataIng"
                          :show-header="false" 
                          v-loading="ingLoading" 
                          @row-click="goToDetail"
                          :class="{'no-detail':!dataIng.length}">
                          <el-table-column align="center" prop="index" width="80"></el-table-column>
                          <el-table-column align="center" prop="ComType" ></el-table-column>
                          <el-table-column align="center" prop="Subject"></el-table-column>
                          <el-table-column align="center" prop="dCreateTime"></el-table-column>
                          <el-table-column align="center" prop="Status" ></el-table-column>
                          <el-table-column align="center"  width="80" >
                            <template slot-scope="scope">
                              <img :src="require('./img/gps.png')" @click.stop="onHandle(scope.row)">
                            </template>
                          </el-table-column>
                          <!-- <p v-show="ingPageTotal>pageSize&&!flag0"
                            slot="append"
                            style="text-align:center; line-height:30px;border-bottom:1px solid #EBEEF5;"
                          >
                            <a href="javascript:;" @click=" flag0 =!flag0" class="blue01">查看更多</a>
                          </p> -->
                        </el-table>
                        <el-pagination 
                          :total="ingPageTotal" 
                          @current-change="ingCurrentChange" 
                          :current-page.sync="ingCurrentPage"
                          :page-size="pageSize" 
                          background 
                          layout="prev, pager, next" 
                          v-show="ingPageTotal>pageSize" 
                          class="text-center"
                           >
                        </el-pagination>
                      </el-collapse-item>
                       <el-collapse-item :title="`整改中（${handlePageTotal}）`" name="2">
                        <el-table 
                        :data="dataHandle" 
                        :cell-style="{fontSize: '18px'}"
                        :show-header="false" 
                        v-loading="handleLoading"
                        @row-click="goToDetail"
                        :class="{'no-detail':!dataHandle.length}">
                          <el-table-column align="center" prop="index"  width="80"></el-table-column>
                          <el-table-column align="center" prop="ComType"></el-table-column>
                          <el-table-column align="center" prop="Subject"></el-table-column>
                          <el-table-column align="center" prop="dCreateTime"></el-table-column>
                          <el-table-column align="center" prop="Status"></el-table-column>
                          <el-table-column align="center"  width="80">
                            <template slot-scope="scope">
                              <img :src="require('./img/gps.png')" @click.stop="onHandle(scope.row)">
                            </template>
                          </el-table-column>
                          <!-- <p v-show="handlePageTotal>pageSize&&!flag1"
                            slot="append"
                            style="text-align:center; line-height:30px;border-bottom:1px solid #EBEEF5;"
                          >
                            <a href="javascript:;" @click=" flag1 =!flag1" class="blue01">查看更多</a>
                          </p> -->
                        </el-table>
                        <el-pagination 
                          :total="handlePageTotal" 
                          @current-change="handleCurrentChange" 
                          :current-page.sync="handleCurrentPage"
                          :page-size="pageSize" 
                          background 
                          layout="prev, pager, next" 
                          v-show="handlePageTotal>pageSize" 
                          class="text-center" >
                        </el-pagination>
                      </el-collapse-item>
                      <el-collapse-item :title="`已整改（${overPageTotal}）`" name="3">
                        <el-table 
                        :data="dataOver" 
                        :show-header="false"
                        v-loading="overLoading" 
                        @row-click="goToDetail"
                        :class="{'no-detail':!dataOver.length}">
                          <el-table-column align="center" prop="index"  width="80"></el-table-column>
                          <el-table-column align="center" prop="ComType"></el-table-column>
                          <el-table-column align="center" prop="Subject"></el-table-column>
                          <el-table-column align="center" prop="dCreateTime"></el-table-column>
                          <el-table-column align="center" prop="Status" ></el-table-column>
                          <el-table-column align="center"  width="80">
                            <template slot-scope="scope">
                              <img :src="require('./img/gps.png')" @click.stop="onHandle(scope.row)">
                            </template>
                          </el-table-column>
                          <!-- <p v-show="overPageTotal>pageSize&&!flag2"
                            slot="append"
                            style="text-align:center; line-height:30px;border-bottom:1px solid #EBEEF5;"
                          >
                            <a href="javascript:;" @click=" flag2 =!flag2" class="blue01">查看更多</a>
                          </p> -->
                        </el-table>
                        <el-pagination 
                          :total="overPageTotal" 
                          @current-change="overCurrentChange" 
                          :current-page.sync="overCurrentPage"
                          :page-size="pageSize" 
                          background 
                          layout="prev, pager, next" 
                          v-show="overPageTotal>pageSize" 
                          class="text-center" >
                          <!-- <img :src="require('./img/gps.png')" @click="onHandle(scope.row)" />
                          <img style="margin-left: -6px;" :src="require('./img/gps.png')" @click="onHandle(scope.row)"> -->
                        </el-pagination>
                      </el-collapse-item>
                    </el-collapse>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </el-col>
      </el-row>
    </div>
  </div>
</template>

<script type='textecmascript-6'>
import { mapMutations, mapGetters } from "vuex";
import {
  GetCommunicateList,   //根据项目ID获取沟通管理列表
  SaveCommunicate, //保存沟通管理数据
  GetDetail,    //获取沟通管理详情
  QueryRalationByElement,
  QueryTaskByElement,
  ValidateConstructRalation,
  GetBuilding,
  } from '@/api/api.js'
import ElementTree from '@/common/componentelTree/elementTree'
import getElementTree from '@/common/mixins/getElementTree.js'
import watch from '../../model/module/watch';
export default {
  mixins: [getElementTree],
  data() {
    return {
      projectid:localStorage.getItem('projectid'),
      treeStatus:false,  //结构清单
      allLoading: false,
      ingLoading: false,
      handleLoading: false,
      overLoading: false,
      flag0: false,
      flag1: false,
      flag2: false,
      allCurrentPage: 1,
      allPageTotal: 0,  //总数
      ingCurrentPage: 1,
      ingPageTotal: 0,  //待接收数
      handleCurrentPage: 1,
      handlePageTotal: 0,  //整改中数
      overCurrentPage: 1,
      overPageTotal: 0,  //已整改数
       /**[当前折叠面板] */
      nowCollapse: ["1", "2", "3"],
       /**[待接收] */
      dataIng: [],
      /**[整改中] */
      dataHandle: [],
      /**[待接收] */
      dataOver: [],
      data: "communication沟通管理",
      formInline: {
        user: "",
        region: ""
      },
      tableData: [], //所有沟通数据
      allData: [],  //所有沟通数据包括States
      statusList: ['', '0','1','2'], //状态为空字符串时查询全部， 0： 待接收 1： 处理中 2： 已处理
      currentRow: null,
      pageIndex: 1,
      pageSize: 6,
      ElementIDs: [], // 构建ID
      flog: false,
      treeListSelected: [],
      btnType: 'info',
      btnText: '确认关联',
      cancelComponentId: '',
      isRelatedParam: {
          ElementID: '',
          IndexId: ''
        },
      selected: false, //控制显示清单关联还是任务关联
      options: [],  //下拉框数据
      expandedKeys: [], //默认展开节点集合
      checkedKeys: [], //默认选中节点集合
      array: [],   //树结构数据
      defaultProps: {  //树结构格式
          children: "children",  // 规定子集的属性
          label: "label" // 规定显示的属性
        },
      listType: 1,//排序类型 1.为楼层在上面（施工图） 2为楼层在下面（全费用）
      floorId: "",  // 楼栋
      treeList: [],
    };
  },
  components: {
    ElementTree
  },
  created(){
    this.initModel();
    // this.CommunicateList()
    this.getcommunicating(this.statusList[0])
    this.getcommunicating(this.statusList[1])
    this.getcommunicating(this.statusList[2])
    this.getcommunicating(this.statusList[3])
    this.GetBuilding()
  },
  computed: {
    ...mapGetters([
      'getIsViewAdded'
    ])
  },
  mounted(){
    // this.CommunicateList()
    console.log(this.getIsViewAdded)
    if(this.getIsViewAdded){
      document.getElementsByClassName("bf-toolbar-bottom")[0].style.display = "none"
      document.getElementsByClassName("bf-tree-toolbar")[0].style.display = "block"
    }
    
  },
  methods: {
    // 定位
    onHandle(row) {
      console.log("视点属性：", row);
      console.log(row)
      console.log("所有数据：", this.allData)
      let handleID = row.ID
      let handleItem = {}
      this.allData.forEach(item => {
        if(item.Communicate.ID === handleID){
          handleItem = item
        }
      })
      let elementid = handleItem.States ? handleItem.States[0]:null
      console.log(elementid)
      if(elementid){
          this.modelBox({
            isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
            isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
            zIndex: 100, //模型层级
            background: "",
            ElementIDs: [elementid], // 所有要显示的构件数组，包括半隐藏构件
            highLightElementIDs: [], // 高亮显示的构件
            functionNumber: [28] // 需要模型调用的函数编号数组
          });
      }
    },
    // 发起沟通
    communication() {
      if(sessionStorage.getItem('menuType') !== "2"){
        this.$message({
        type: "warning",
        message: "您没有权限操作",
        center: "true"
        });
        return;
      }
      this.$router.push({
        path: "communication2"
      });
    },
    // 跳转至详情
    goToDetail(row, event, column) {
      console.log(row)
      console.log(event)
      console.log(column)
      this.$router.push({
        path: "communication1",
        query: {
          id: row.ID,
          status: row.Status
        }
      });
      
    },
    // 点击展示结构清单
    showTree(){
      this.treeStatus = true
    },
    // 点击收起结构清单
    closeHandle(val){
      console.log(val)
      this.treeStatus = val;
    },
    /**
     * 加载模型
     */
    initModel(){
      this.$nextTick(() => {
        this.$util.getDomLocation(this, "modelContainer").then(res => {
          console.log(res)
          this.modelBox({
            isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
            isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
            top: res.top, //距离顶部距离‘px'
            left: res.left, //距离左边距离‘px'
            width: res.width, //模型宽‘px'
            height: res.height, //模型高 ‘px'
            zIndex: 100, //模型层级
            background: "",
            ElementIDs: [], // 所有要显示的构件数组，包括半隐藏构件
            highLightElementIDs: [], // 高亮显示的构件
            functionNumber: [42] // 需要模型调用的函数编号数组
          });
        });
      });
    },
    ...mapMutations({
      modelBox: "GET_MODEL_BOX"
    }),
    /**
     * api接口
     */
    // 根据项目ID获取沟通管理列表
    async CommunicateList (state){
      // this.load()
      let data = {
        projectId: this.projectid,
        status: state,
        pageIndex: this.pageIndex,
        pageSize: this.pageSize
      }

      let res = await this.Request(GetCommunicateList(data))
      console.log('沟通管理......')
      console.log(res)
      if(res.StatusCode === 200) {
        let newData = []
        let tData = {}
        res.Detiel.forEach((item, i) => {
            tData = Object.assign({index: `${i+1}`},item.Communicate)
            tData.dCreateTime = item.Communicate.dCreateTime.substr(0, 10)
            tData.Status = `${item.Communicate.DoNum}/${item.Communicate.TotalDoNum}`
            newData.push(tData)
        })
       
        if(data.status === '0'){ 
          this.dataIng = newData
          this.ingPageTotal = parseInt(res.Count)
          this.ingLoading = false
          console.log(this.dataIng)
      
        }else if(data.status === '1'){
          this.dataHandle = newData
          this.handlePageTotal = parseInt(res.Count)
          this.handleLoading = false
          console.log(this.dataHandle)
        } else if( data.status === '2'){
          this.dataOver = newData
          this.overLoading = false 
          this.overPageTotal = parseInt(res.Count)
          console.log(this.dataOver)
        } else if (data.status === ''){
          this.allData = res.Detiel
          this.tableData = newData
          this.allPageTotal = parseInt(res.Count)
          this.allLoading = false
          this.allData = res.Detiel
          console.log("所有数据",this.allData)
        }
        // return newData
        // console.log(this.tableData)
      }else {
        this.$message({
          type: 'error',
          message: res.Message,
          center: 'true'
        })
      }
      // this.$toast.clear()
    },
    /**
     * 点击待接收当前行展示详情
     */
    openIngDetail(row, event, column){
      this.$router.push({
        path: "questionDetail",
        query: {riskID: row.sort}
      });
    },
     /**
     * 翻页
     */
    allCurrentChange: function(val) {
      this.allCurrentPage = val;
      this.pageIndex = val
      this.getcommunicating(this.statusList[0]);
    },
    ingCurrentChange: function(val) {
      this.ingCurrentPage = val;
      this.pageIndex = val
      console.log(val)
      this.getcommunicating(this.statusList[1]);
    },
    handleCurrentChange: function(val){
      this.handleCurrentPage = val;
      this.pageIndex = val
      this.getcommunicating(this.statusList[2]);

    },
    overCurrentChange: function(val){
      this.overCurrentPage = val;
      this.pageIndex = val
      this.getcommunicating(this.statusList[3]);
    },

    /**
     * 根据项目ID和状态获取沟通管理问题列表
     */  
    getcommunicating(state){
      if(state === '0') {
        this.ingLoading = true;
      }else if(state === '1'){
        this.handleLoading = true
      } else if(state === '2'){
        this.overLoading = true
      } else if(state === ''){
        this.allLoading = true
      } else {
        return false
      }
      this.CommunicateList(state)
    },

    // 处理树节点选中事件
    handleCheckChange (data, checked, treeList) {
      console.log(data)
      console.log(checked)
      console.log(treeList)
      
      if (this.flog) return
      this.treeListSelected = treeList
      this.flog = true
      // 判断是否选中

      if (checked.checkedNodes.length) {
        this.btnType = 'warning'
        if (data.elementId) {
          this.isRelatedParam.ElementID = data.elementId
        }
      } else {
        this.isRelatedParam.ElementID = ''
        this.btnType = 'info'
        this.flog = false
      }
      if (this.isRelatedParam.IndexId === '') {
          this.QueryRalationByElement(treeList)
      } 
    },
    // 处理树节点点击事件
    handleNodeClick (row, node) {
      if (node.checked) {
        this.btnType = 'warning'
      } else {
        this.btnType = 'info'
      }
      if (row.elementId && node.checked && this.cancelListId) {
        this.cancelComponentId = row.elementId
        this.btnText = '取消关联'
      } else {
        this.btnText = '确认关联'
        this.cancelComponentId = ''
      }
    },
     /**
     *  根据构件获取构件关联的信息
     *  @param {Array} param 构件id集合
     */
    QueryRalationByElement (treeList) {
      let param = []
      // let treeList = this.$refs.tree.getCheckedNodes(true)
      if (treeList.length) {
        treeList.forEach(item => {
          param.push(item.elementId)
        })
      }
      QueryRalationByElement(param).then(data => {
        console.log(data)
        // this.flog = false
        // if (this.listType === 1) {
        //   // 先清空所有对象的关联
        //   this.treeList.forEach(item => {
        //     item.isCheck = false
        //     item.isDisabled = false
        //   })
        //   this.treeList.forEach(obj => {
        //     data.Detiel.forEach(item => {
        //       if (obj['序号'] === item.IndexId) {
        //         obj.isCheck = true
        //         obj.isDisabled = true
        //       }
        //     })
        //   })
        // } else if (this.listType === 2) {
        //   // 先清空所有对象的关联
        //   this.treeList.forEach(item => {
        //     item.isCheck = false
        //     item.isDisabled = false
        //   })
        //   // 再匹配对应的关联关系
        //   this.treeList.forEach(item => {
        //     data.Detiel.forEach(obj => {
        //       if (obj.IndexId === item.IndexId) {
        //         item.isCheck = true
        //         item.isDisabled = true
        //       }
        //     })
        //   })
        // } else if (this.listType === 3) {
        //   // 先清空所有对象的关联
        //   this.list.forEach(item => {
        //     item.isCheck = false
        //     item.isDisabled = false
        //   })
        //   // 再匹配对应的关联关系
        //   this.list.forEach(item => {
        //     data.Detiel.forEach(obj => {
        //       if (obj.IndexId === item.IndexId) {
        //         item.isCheck = true
        //         item.isDisabled = true
        //       }
        //     })
        //   })
        // }
      })
    },
    /**
     * 根据构件获取任务关联的信息
     * @param {Array} 构件id集合
     */
    QueryTaskByElement (treeList) {
      let param = []
      // let treeList = this.$refs.tree.getCheckedNodes(true)
      if (treeList.length) {
        treeList.forEach(item => {
          param.push(item.elementId)
        })
      }
      QueryTaskByElement(param).then(data => {
        this.flog = false
        // 先清空所有对象的关联
        this.taskList.forEach(item => {
          item.isCheck = false
          item.isDisabled = false
        })
        // 再匹配对应的关联关系
        this.taskList.forEach(item => {
          data.Detiel.forEach(obj => {
            if (obj.Task === item.TaskId) {
              item.isCheck = true
              item.isDisabled = true
            }
          })
        })
      })
    },
     /**
     * 判断构件的关联
     * @param {String} ElementID  构件id
     * @param {String} IndexId 清单ID
     */
    // ValidateConstructRalation () {
    //   if (this.isRelatedParam.ElementID === '' || this.isRelatedParam.IndexId === '') return this.flog = false
    //   let param = []
    //   param.push(this.isRelatedParam)
    //   ValidateConstructRalation(param).then(data => {
    //     this.flog = false
    //     this.isRelated = data.Result
    //     if (this.isRelated) {
    //       this.btnText = '取消关联'
    //     } else {
    //       this.btnText = '确认关联'
    //     }
    //   })
    // },
       /**
       * 获取楼栋信息
       * @param {String} projectid 项目id
       */
      GetBuilding () {
        GetBuilding({ projectid: this.projectid }).then(data => {
          console.log(data)
          this.options = data.Detiel
          console.log(this.options)
          this.options.unshift({ id: '', text: '全部' })
          // this.GetElementTree()
        })
      },
  },
  watch: {
    getIsViewAdded(val){
      console.log(val)
      if(val){
        document.getElementsByClassName("bf-toolbar-bottom")[0].style.display = "none"
        document.getElementsByClassName("bf-tree-toolbar")[0].style.display = "block"
      }
    }
  }
};
</script>
<style lang='stylus' rel='stylesheet/stylus'>
.container-communication {
  width: 100%;
  height: 100%;
}

.container-communication {
  background: #f5f6fa;
  padding: 20px;
  box-sizing: border-box;
  overflow-y: hidden;
}

.container-communication .grid-content .el-button {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 120px;
  height: 40px;
  line-height: 40px;
  border: none !important;
  padding: 0;
  cursor: pointer;
  background: #FDA143 !important;
  color: #fff;
  text-align: center;
  z-index: 200;
}

.container-communication .container-cost-left {
  position: relative;
  background: #fff;
  height: 100%;
  margin-right: 20px;
  border: 1px solid #ecedf1;
  box-sizing: border-box;
}
.container-communication .container-cost-left .tree_img {
  position: absolute;
  top: 0px;
  left: 0px;
  z-index: 210;
}
.container-communication .container-cost-left .treeStyle{
  position: absolute;
  top: 0px;
  left: 0px;
  width: 340px;
  height: 811px;
  background-color: rgba(0,0,0,0.5)
  box-shadow: 4px 6px 10px #666;
  z-index: 210;
}

.container-communication .wrapper, .container-communication .el-row, .container-communication .el-col, .container-communication .grid-content {
  height: 100%;
}
.container-communication .bg-purple-light {
  background-color: #fff;
}

.container-communication .el-form-item {
  width: 18%;
  height: 40px;
}

.width20 {
  width: 5%;
  position: absolute;
  right: 4px;
}

.container-communication .el-button {
  height: 38px;
  background: #4580fe;
}

.container-cost-right .el-select .el-input__inner {
  border: 1px solid #ecedf1;
  border-radius: 5px;
  overflow: hidden;
}

.container-communication .container-cost-right .el-input__suffix {
  width: 50px;
  background: #44508a;
  border-radius: 0 5px 5px 0;
}

.container-communication .container-cost-right .el-input--suffix {
  overflow: hidden;
}

.container-communication .container-cost-right .el-select .el-input .el-select__caret {
  color: #fff;
}

.container-communication .container-cost-right .el-table .has-gutter th {
  background: #44508a;
  color: #fff;
  text-align: center;
}
.container-communication .container-cost-right .el-collapse-item__header{
  font-size: 18px;
  text-indent: 8px;
  background: #fff!important;
  
}
.container-communication .container-cost-right .el-collapse-item .el-collapse-item__content {
  .el-pagination li.number {
    text-indent: 0px!important;
  }
}
.container-communication .el-table--enable-row-transition .el-table__body td, .container-communication .el-table--enable-row-transition .el-table__body td .cell {
  text-align: center;
  padding: 0;
}

.container-communication .el-table--enable-row-transition .el-table__body td div {
  padding: 12px;
}

.blueBorder {
  border-left: 6px solid #4476cd;
}

.greenBorder {
  border-left: 6px solid #05a663;
}

.lightGreenBorder {
  border-left: 6px solid #9ce621;
}

.redBorder {
  border-left: 6px solid #e63837;
}

.pinkBorder {
  border-left: 6px solid #fe41b9;
}

.bottom {
  clear: both;
  text-align: center;
}

.item {
  margin: 4px;
}

.left .el-tooltip__popper, .right .el-tooltip__popper {
  padding: 8px 10px;
}

.new-form-inline {
  position: relative;
}

//调整样式
.filter-wrapper {
  .table {
    .title {
      .el-table__body-wrapper{
        display: none;
        }
      }
  }
  .text-center{
      text-align: center;
      // text-indent: 0px;
    }
  .content {
    .no-detail {
       .el-table__body-wrapper{
        display: none;
        }
    }
    .el-collapse-item__content{
      padding-bottom: 0px!important;
    }
  }
     
}

</style>
<style >
.model-container {
  width: 100%;
  height: 100%;
  padding: 0 !important;
  z-index:90;
  /* padding-top: 50px; */
  box-sizing: border-box;
}
 .container-cost-right .el-table .cell{
  font-size: 16px;
  line-height: 40px
}
/* 隐藏模型部分工具条 */
.bf-button.gld-bf-zoomrect ,
.bf-button.gld-bf-measure,
.bf-button.bf-toolbar-button.gld-bf-sectionbox,
.bf-button.gld-bf-map,
.bf-button.gld-bf-properties,
.bf-button.gld-bf-settings,
.bf-button.gld-bf-information,
.bf-button.gld-bf-maximize{
    display: none;
}
.bf-button.gld-bf-home:hover,.bf-button.gld-bf-firstperson:hover{
  background-color: rgba(0,0,0,.5)
}
.bf-toolbar.bf-toolbar-bottom{
  left:initial !important;
  right:0 !important;
  transform:initial !important; 
  background-color: rgba(0,0,0,.4);
  border: none;
}

</style>