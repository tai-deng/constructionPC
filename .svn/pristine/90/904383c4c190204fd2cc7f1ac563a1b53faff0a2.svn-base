<!-- model模型 -->
<template>
  <div class="container-model">
    <div class="wrapper">
      <div ref="model" class="model"></div>
    </div>
  </div>
</template>

<script type='textecmascript-6'>
//接口
import { GetViewToken, GetDefaultModelID } from "@/api/api.js";
import method from './module/methods.js'
import watchs from './module/watch.js'
export default {
  mixins:[method,watchs],
  props: {
    ElementIDs: {
      type: Array
    },
    // 函数序号
    functionNumber:{
      type:Array
    },
    //模型大小
    widthAndHeight:{
      type:Object
    },
    highLightElementIDs:{type:Array},//高亮某构件的ID数组
  },
  data() {
    return {
      viewer3D: {}, // 3D模型实例
      viewToken: "" //binface视图token，每天过期
    };
  },
  created() {
    console.log(this.widthAndHeight)
    this._initData();
  },
  methods: {
    /**
     * 初始化
     */
    async _initData() {
      //获取默认模型ID
      let defaultModelId = await this.getDataBySessionStorage(
        GetDefaultModelID,
        {},
        "defaultModelId"
      );
      // 获取viewToken
      this.viewToken = await this.getDataBySessionStorage(
        GetViewToken,
        { modelId: defaultModelId },
        "viewToken",
        true
      );
      /* eslint-disable */
      let options = new BimfaceSDKLoaderConfig();
      console.log("BIMface 模型DOM", options);
      options.viewToken = this.viewToken;
      BimfaceSDKLoader.load(
        options,
        this.successCallback,
        this.failureCallback
      );
    },
    /* eslint-disable */
    successCallback(viewMetaData) {
      if (viewMetaData.viewType == "dwgView") {
        console.log("2D模型");
      } else if (viewMetaData.viewType == "3DView") {
        console.log("3D模型");
        // 配置参数
        var config = new Glodon.Bimface.Viewer.Viewer3DConfig()
        config.domElement = this.$refs.model;
        // 创建viewer3D对象
        var viewer3D = new Glodon.Bimface.Viewer.Viewer3D(config)
        // 添加模型
        viewer3D.addView(this.viewToken);
        // 监听模型加载中
        viewer3D.addEventListener(
          Glodon.Bimface.Viewer.Viewer3DEvent.ViewLoading,
          e => {
            // this.modelLoading() // 模型加载中...
          }
        );
        // 监听添加view完成的事件
        viewer3D.addEventListener(
          Glodon.Bimface.Viewer.Viewer3DEvent.ViewAdded,() => {
            // 渲染3D模型
            viewer3D.render();
            viewer3D.enableMouseHoverHighlight(); //允许鼠标hover构件时高亮
            this.viewer3D = viewer3D;
            this.isViewAdded = true; //模型加载完成状态
            this.setCameraStatus()
          }
        );
        /**
         * 鼠标左键点击事件
         * 返回点击对象
         */
        viewer3D.addEventListener(
          Glodon.Bimface.Viewer.Viewer3DEvent.MouseClicked,
          e => {
            console.log(e);
            this.$store.commit("upArtifactsObj", e);
          }
        );

        // 将模型实例放在状态管理，全局可访问
        this.$store.commit("upViewer3D", viewer3D);
      } else if (viewMetaData.viewType == "drawingView") {
        console.log("矢量图纸");
      } else if (viewMetaData.viewType == "rfaView") {
        consolej.log("族文件");
      }
    },

    failureCallback(error) {
      console.log("失败");
      this.$message({ type: "error", message: "模型加载失败", center: "true" });
    }
  }
};
</script>
<style lang='stylus' scoped rel='stylesheet/stylus'>
.container-model
  width 100%
  height 100%
</style>