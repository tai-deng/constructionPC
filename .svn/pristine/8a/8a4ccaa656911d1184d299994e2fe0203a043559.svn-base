<template>
  <div class="gantt" ref="gantt"></div>
</template>

<script>
import "dhtmlx-gantt";
import "dhtmlx-gantt/codebase/locale/locale_cn.js";
import "dhtmlx-gantt/codebase/ext/dhtmlxgantt_marker.js";
import config from "../../modules/zoom.js";
import { mapMutations } from "vuex";
import arrayClick from "../../modules/util.js";

export default {
  name: "gantt",
  data() {
    return {
      // 选中的id
      taskId: [],
      // changeDate: null
    };
  },
  props: {
    tasks: {
      type: Object,
      default() {
        return { data: [], links: [] };
      }
    },
    changeDate: null
  },
  methods: {
    $_initGanttEvents: function() {
      if (gantt.$_eventsInitialized) return;
      // 任务点击
      gantt.attachEvent("onTaskSelected", id => {
        let task = gantt.getTask(id);
        this.taskId = arrayClick.arrayClick(this.taskId, id);
      });
      // 添加进度后
      gantt.attachEvent("onAfterTaskAdd", (id, task) => {
        this.$emit("task-updated", id, "inserted", task);
        task.progress = task.progress || 0;
        if (gantt.getSelectedId() == id) {
          this.$emit("task-selected", task);
        }
      });
      // 进度更新后
      gantt.attachEvent("onAfterTaskUpdate", (id, task) => {
        this.$emit("task-updated", id, "updated", task);
      });
      // 删除任务后
      gantt.attachEvent("onAfterTaskDelete", id => {
        // this.$emit("task-updated", id, "deleted");
        if (!gantt.getSelectedId()) {
          console.log();
        }
      });
      // 点击关闭灯箱
      gantt.attachEvent("onLightboxCancel", v => {
        console.log("cancel", v);
      });
      // 添加链接线后
      gantt.attachEvent("onAfterLinkAdd", (id, link) => {
        this.$emit("link-updated", id, "inserted", link);
      });
      // 更新连接线
      gantt.attachEvent("onAfterLinkUpdate", (id, link) => {
        this.$emit("link-updated", id, "updated", link);
      });
      // 删除连接线
      gantt.attachEvent("onAfterLinkDelete", (id, link) => {
        this.$emit("link-updated", id, "deleted");
      });
      gantt.$_eventsInitialized = true;
    },
    addTask(task) {
      // 添加一项新任务
      gantt.addTask(task);
    },
    closeTask(id) {
      // 关闭一个任务
      gantt.close(id);
    },
    userLabelById(id) {
      for (var i = 0; i < this.tasks.length; i++) {
        if (this.tasks[i].data.id == id) {
          return this.tasks[i].data.text;
        }
      }
      return "";
    },
    // 删除指定任务节点
    deleteItemFn() {
      let _this = this;
      if (!this.taskId) {
        gantt.confirm({
          title: gantt.locale.labels.confirm_deleting_title,
          text: gantt.locale.labels.confirm_deleting,
          callback: function(res) {
            if (res) {
              this.taskId.forEach(element => {
                gantt.deleteTask(this.element);
              });
            } else {
              _this.gantState({ deleteTaskItem: false });
            }
          }
        });
      } else {
        console.log("未选中");
        this.taskId = null;
      }
    },
    ...mapMutations({
      gantState: "GET_GANTT_STATE"
    })
  },
  computed: {
    deleteItem() {
      return this.$store.getters.getGanttState.deleteTaskItem;
    }
  },
  watch: {
    changeDate(curVal, oldVal) {
      config.init(curVal);
      gantt.init(this.$refs.gantt); // 初始化gantt 节点
      gantt.parse(this.$props.tasks); // 解析任务数据
    },
    deleteItem(c, o) {
      if (c) {
        this.deleteItemFn();
      }
    }
  },
  mounted() {
    this.$_initGanttEvents(); // 分发所有事件
    config.init(2);
    config.layout();
    gantt.init(this.$refs.gantt); // 初始化gantt 节点
    gantt.parse(this.$props.tasks); // 解析任务数据
  }
};
// 自定义按钮事件
window.clickGridButton = function(id, action) {
  switch (action) {
    case "edit":
      gantt.showLightbox(id);
      break;
    case "add":
      gantt.createTask(null, id);
      break;
    case "delete":
      gantt.confirm({
        title: gantt.locale.labels.confirm_deleting_title,
        text: gantt.locale.labels.confirm_deleting,
        callback: function(res) {
          if (res) gantt.deleteTask(id);
        }
      });
      break;
  }
};
// 子节点复选框
window.someFunc = function(id) {
  gantt.sort((a, b) => {
    // a = a.users.length;
    // b = b.users.length;

    // if (direction) {
    //   return a > b ? 1 : a < b ? -1 : 0;
    // } else {
    //   return a > b ? -1 : a < b ? 1 : 0;
    // }
    // console.log(a,b)
  });
};
</script>

<style>
/* 加载gantt 样式 */
@import "~dhtmlx-gantt/codebase/dhtmlxgantt.css";
/* 右边标题背景/颜色 */
.gantt{
  /* padding: 0 40px; */
  background-color: #f0f2f5;
}
.day_scale {
  background-color: rgba(108,123,188,1);
}
.week_scale {
  background-color: #666666;
}
.month_scale {
  background-color: #333333;
}
.grid_header_class {
  color: red;
  background-color: #f1f1f1;
}
.gantt_task .gantt_task_scale .gantt_scale_cell {
  font-size: 18px;
  font-family: SourceHanSansCN-Medium;
  font-weight: 500;
  color: rgba(255, 255, 255, 1);
}
/* 左边标题背景/颜色 */
.gantt_grid_scale {
  background-color: rgba(67, 80, 137, 1);
}
.gantt_grid_scale .gantt_grid_head_cell {
  font-size: 18px;
  font-family: SourceHanSansCN-Medium;
  font-weight: 500;
  color: rgba(255, 255, 255, 1);
}
/* 操作图标 */
.fa {
  cursor: pointer;
  font-size: 14px;
  text-align: center;
  opacity: 0.4;
  padding: 5px;
}

.fa:hover {
  opacity: 1;
}

.fa-pencil {
  color: #ffa011;
}

.fa-plus {
  color: #328ea0;
}

.fa-times {
  color: red;
}
.fa img {
  width: 18px;
  height: 18px;
  display: block;
}
/* 灯箱按钮 */
.gantt_btn_set div {
  display: flex;
  align-items: center;
  justify-items: center;
  margin: 0;
}
.gantt_delete_btn,
.gantt_cancel_btn,
.gantt_save_btn {
  padding-right: 8px;
}
.gantt_section_time {
  line-height: 2em;
}
.gantt_duration {
  line-height: 2em;
}
.gantt_section_time .gantt_time_selects select,
.gantt_section_time .gantt_duration {
  height: 2em !important;
}
/* 自定义按钮 */
.gantt_tree_content{
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
}
.bnt-warp img{
  width: 18px;
  height: 18px;
  display: block;
}
.bnt-warp{
  flex: 1;
  display: flex;
  align-items: center;
  justify-items: center;
}
</style>