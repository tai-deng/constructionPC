
//范围管理 楼栋 --> 专业 --> 楼层
const userID = localStorage.getItem("userId"); //用户ID
const projectid = localStorage.getItem("projectid");
import { GetChangeInfo, GetElementIDByInfo, QueryPurchaseSumElement, QueryPurchaseInfoElement, QueryChangListElement } from '../../../../api/api'

export const dataResetBSF = (that, category) => {
    if (category == 'BuildName') {
        that.FloorbyList = []; // 楼层下拉
        that.SpecialtyList = []; // 专业下拉
        that.filterForm.Specialty = ""; // 专业
        that.filterForm.Floor = ""; // 楼层
        that.filterForm.Name = ""; // 查询内容
    } else if (category == 'Specialty') {
        that.FloorbyList = []; // 楼层下拉
        that.filterForm.Floor = ""; // 楼层
        that.filterForm.Name = ""; // 查询内容
    } else if (category == 'Floor') {
        that.filterForm.Name = ""; // 查询内容
    }
}

// 获取楼栋
export const getBuildList = (that, GetBuilding, cb) => {
    // that.load();
    that.buildLoading = true;
    GetBuilding({ projectid: projectid }).then(res => {
        // that.$toast.clear();
        that.buildLoading = false;
        if (res.StatusCode == 200) {
            that.BuildNameList = res.Detiel;
            that.options = res.Detiel;
            if (typeof cb == 'function') {
                cb();
            }
        }
    }, res => { that.buildLoading = false; });
}

// 楼栋 -> 获取专业
export const getSpecialtyList = (that, GetSpecialtybyBuilding) => {
    // that.load();
    that.specLoading = true;
    GetSpecialtybyBuilding({ projectid: projectid, building: that.filterForm.BuildName }).then(
        res => {
            // that.$toast.clear();
            that.specLoading = false;
            if (res.StatusCode == 200) {
                that.SpecialtyList = res.Detiel;
            }
        }, res => { that.SpecialtyList = false; }
    );
}

// 楼栋 -> 专业 -> 获取模型楼层
export const getFloorList = (that, GetFloorbyBuilding) => {
    // that.load();
    that.floorLoading = true;
    GetFloorbyBuilding({ projectid: projectid, building: that.filterForm.BuildName, Specialty: that.filterForm.Specialty }).then(
        res => {
            // that.$toast.clear();
            that.floorLoading = false;
            if (res.StatusCode == 200) {
                that.FloorbyList = res.Detiel;
            }
        }, res => { that.floorLoading = false; }
    );
}

// 发起采购
export const initPurchase = (that, SaveRangeInfo) => {
    that.load();
    let listItems = that.listItems.filter(item => {
        if (item.isSel) {
            return item
        }
    })
    if (that.listFlow.lenght == 0) {
        that.$message({
            type: "warning",
            message: "工作流程不能为空！"
        });
        return;
    }
    let listFlow = that.listFlow.map(item => {
        return {
            Priority: item.Priority,
            OrgId: item.OrgId.id,
            DepId: item.DepId.id,
            Person: item.Person.id,
            Status: item.Status,
        }
    })
    SaveRangeInfo(
        { projectid: projectid, userid: userID },
        {
            IsApprove: that.form.check,
            Type: that.form.Type,
            StartTime: that.filterForm.starttime,
            EndTime: that.filterForm.endtime,
            DemandTime: that.form.DemandTime,
            ApplyPerson: userID,
            Status: 0,
            listFlow,
            listItems
        }
    ).then(
        res => {
            that.$toast.clear();
            if (res.StatusCode == 200) {
                that.$message({
                    type: "success",
                    message: res.Message,
                    center: "true"
                });
                that.$router.go(-1);
            }
        }
    );
}

// 楼栋 -> 获取项目名称
export const getProjectNames = (that, GetProjectName) => {
    // that.load();
    that.projectnameLoading = true;
    GetProjectName({ projectid: projectid, BuildName: that.buildname }).then(
        res => {
            that.projectnameLoading = false;
            // that.$toast.clear();
            if (res.StatusCode == 200) {
                that.projectNameList = res.Detiel;
            }
        }, () => { that.projectnameLoading = false }
    );

}

// 获取所有的构件ID
export const getAllElementID = (that, BuildName = '', Specialty = '', Floor = '') => {
    let par = { ProjectID: projectid, BuildName, Specialty, Floor }
    GetElementIDByInfo(par).then(res => {
        if (res.StatusCode == 200) {
            that.allElementId = res.Detiel;
        }
    })
}

// 定位高亮
export const onHandle = (that, par, flag) => {
    let api = null;
    // 变更列表
    if (flag == 'bg') {
        api = GetChangeInfo;
        // 物资列表
    } else if (flag == 'wz') {
        api = QueryPurchaseInfoElement;
        // 采购管理列表
    } else if (flag == 'cg') {
        api = QueryPurchaseSumElement;
        // 变更筛选
    } else if (flag == 'bgsel') {
        api = QueryChangListElement;
    }
    that.load();
    api(par).then(res => {
        that.$toast.clear();
        if (res.StatusCode == 200) {
            let state = null;
            if (flag == 'bg') {
                res.Result.listViewPoint.forEach(element => {
                    if (element.MasterID == par.id) {
                        state = element.State
                        that.modelBox({
                            isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
                            isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
                            zIndex: 100, //模型层级
                            background: "",
                            ElementIDs: [state], // 所有要显示的构件数组，包括半隐藏构件
                            highLightElementIDs: [], // 高亮显示的构件
                            functionNumber: [28] // 需要模型调用的函数编号数组
                        });
                    }
                });
            }

            if (flag == 'bgsel') {
                state = res.Detiel
                if (state && that.allElementId.length > 0) {
                    that.modelBox({
                        isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
                        isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
                        zIndex: 100, //模型层级
                        background: "",
                        ElementIDs: that.allElementId, // 所有要显示的构件数组，包括半隐藏构件
                        highLightElementIDs: state, // 高亮显示的构件
                        functionNumber: [33] // 需要模型调用的函数编号数组
                    });
                }
            }

            if (flag == 'wz') {
                state = res.Detiel;
                if (state.length > 0)
                    that.modelBox({
                        isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
                        isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
                        zIndex: 100, //模型层级
                        background: "",
                        ElementIDs: that.allElementId, // 所有要显示的构件数组，包括半隐藏构件
                        highLightElementIDs: state, // 高亮显示的构件
                        functionNumber: [33] // 需要模型调用的函数编号数组
                    });
            }

            if (flag == "cg") {
                state = res.Result;
                if (state) {
                    that.modelBox({
                        isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
                        isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
                        zIndex: 100, //模型层级
                        background: "",
                        ElementIDs: [state], // 所有要显示的构件数组，包括半隐藏构件
                        highLightElementIDs: [], // 高亮显示的构件
                        functionNumber: [28] // 需要模型调用的函数编号数组
                    });
                }
            }
        }
    })
}