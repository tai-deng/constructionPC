<!-- 范围管理-采购列表 scope -->
<template lang="pug" src="./index.pug"></template>
<style lang="stylus" src="./index.styl" scope></style>

<script type='textecmascript-6'>
import CommonDialog from "@/common/common-dialog/index";
import ScopeChangeList from "./components/scope-change-list/index";
import ScopeDetail from "./components/scope-detail/index";
import { mapMutations } from "vuex";

import {
  GetPurchaseRange,
  GetBuilding,
  GetSpecialtybyBuilding,
  GetFloorbyBuilding
} from "../../../../api/api.js";
import {
  dataResetBSF,
  getBuildList,
  getSpecialtyList,
  getFloorList,
  onHandle,
  getAllElementID
} from "../util/util.js";
import ElementTree from "@/common/componentelTree/elementTree";

export default {
  // mixins: [treeInit],
  components: {
    ScopeChangeList,
    // ScopeChangeDetail,
    CommonDialog,
    ScopeDetail,
    ElementTree
  },
  created() {
    // 获取采购列表
    this.getPurchaseList();

    // 楼栋下拉
    getBuildList(this, GetBuilding, () => {
      this.BuildNameList.unshift({
        text: "全部",
        id: "全部"
      });
    });

    // 路由判断
    if (this.$route.query.data !== 2) {
      this.activeTab = true;
    } else {
      this.activeTab = false;
    }

    //加载模型
    this.initModel();

    // 获取所有的构件ID
    getAllElementID(this);
  },
  mounted() {
    // 获取当前筛选的所有
    let timer = setInterval(() => {
      let getIsViewAdded = this.$store.getters.getIsViewAdded;
      if (this.allElementId !== "" && getIsViewAdded) {
        this.onLocation();
        clearInterval(timer);
      }
    }, 50);
  },
  data() {
    return {
      allElementId: "", // 所有的构件ID
      okText: "",
      projectid: localStorage.getItem("projectid"),
      BuildNameList: [], // 楼栋下拉
      SpecialtyList: [], // 专业下拉
      FloorbyList: [], // 楼层下拉
      paging: { page: 1, rows: 5 }, // [采购列表分页]
      filterForm: {
        BuildName: "全部", // 楼栋
        Specialty: "", // 专业
        Floor: "", // 楼层
        Name: "" // 查询内容
      },
      PurchaseList: [],
      totalNum: 0,
      purchaseDetailId: "", // 采购详情ID

      /**[弹框类型] 可选项
       *  @change         发起变更
       *  @purchaseDetail 采购详情
       */
      dialogTypeOptions: {
        changeDetail: "changeDetail",
        purchaseDetail: "purchaseDetail"
      },
      /**[弹框类型] */
      dialogType: "purchaseDetail",
      /**[当前选项卡]
       *  @ture   采购列表
       *  @false  变更列表
       */
      activeTab: true
    };
  },
  computed: {
    /**[弹框标题] */
    dialogTitle() {
      let tit = "变更详情";

      if (this.dialogType === this.dialogTypeOptions.purchaseDetail) {
        tit = "采购详情";
      }

      return tit;
    }
  },
  methods: {
    // 单项进度定位
    onPosition(row) {
      this.onLocation({ purchaseid: row.ID });
    },
    /**[获取采购列表] */
    getPurchaseList() {
      this.load();
      let BuildName = "";
      if (this.filterForm.BuildName !== "全部") {
        BuildName = this.filterForm.BuildName;
      }
      GetPurchaseRange({
        BuildName, // 楼栋
        Specialty: this.filterForm.Specialty, // 专业
        Floor: this.filterForm.Floor, // 楼层
        Name: this.filterForm.Name, // 搜索内容
        page: this.paging.page, // 第几也页
        rows: this.paging.rows // 每页行数
      }).then(res => {
        this.$toast.clear();
        if (res.StatusCode == 200) {
          res.Detiel.forEach(element => {
            element.dCreateTime = element.dCreateTime
              ? require("moment")(element.dCreateTime).format("YYYY-MM-DD")
              : "/";
            element.DemandTime = element.DemandTime
              ? require("moment")(element.DemandTime).format("YYYY-MM-DD")
              : "/";
          });
          this.PurchaseList = res.Detiel;
          this.totalNum = Number(res.Count);
        }
      });
    },
    // 分页
    curChange(d) {
      this.paging.page = d;
      this.getPurchaseList();
    },
    // 定位
    onLocation(par) {
      let pars = { projectid: this.projectid };
      if (par) {
        pars = Object.assign(par, { projectid: this.projectid });
      }
      onHandle(this, pars, "wz");
    },

    /**[采购详情] */
    toPurchaseDetail(id) {
      // scope-detail--> 操作路由
      this.$router.push({
        path: "scopeListDetail",
        query: { purchaseDetailId: id }
      });
    },
    /**[弹框确定] */
    dialogOk() {
      this.$refs.dialogRef.hide();
    },
    /**[弹框取消] */
    dialogClose() {
      this.$refs.dialogRef.hide();
    },
    /**[采购列表按钮] */
    onPurchaseBtn() {
      this.activeTab = true;
      this.getPurchaseList();
      this.onLocation();
    },
    /**[变更列表按钮] */
    onChangeBtn() {
      this.activeTab = false;
    },
    /**[发起变更 or 发起采购]
     *  @true 发起采购
     *  @false 发起变更
     */
    startChange() {
      if (this.activeTab) {
        /**[发起采购] */
        this.$router.push({
          path: "material-need"
        });
      } else {
        /**[发起变更] */
        this.$router.push({
          path: "InitiateChange"
        });
      }
    },
    /**[显示变更详情] */
    showChangeDetail(d) {
      this.$router.push({
        path: "ChangeDetail",
        query: { data: JSON.stringify(d) }
      });
    },
    /**
     * 加载模型
     */
    initModel() {
      this.$nextTick(() => {
        this.$util.getDomLocation(this, "modelContainer").then(res => {
          this.modelBox({
            isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示  false:隐藏模型
            isLoadModel: true, //是否加载模型  true：加载模型，如果已经加载，不会重新加载，  false:卸载模型
            top: res.top, //距离顶部距离‘px'
            left: res.left, //距离左边距离‘px'
            width: res.width, //模型宽‘px'
            height: res.height, //模型高 ‘px'
            zIndex: 100, //模型层级
            background: "",
            ElementIDs: [], // 所有要显示的构件数组，包括半隐藏构件
            highLightElementIDs: [], // 高亮显示的构件
            functionNumber: [34] // 需要模型调用的函数编号数组
          });
        });
      });
    },
    ...mapMutations({
      modelBox: "GET_MODEL_BOX"
    })
  },
  watch: {
    // 搜索
    "filterForm.Name": {
      handler(val, oldval) {
        if (val != "") {
          this.getPurchaseList();
          this.onLocation({
            BuildName: this.filterForm.BuildName,
            Specialty: this.filterForm.Specialty,
            Floor: this.filterForm.Floor,
            KeyWord: val
          });
        }
      }
    },
    // 楼层
    "filterForm.Floor": {
      handler(val, oldval) {
        if (val != "") {
          dataResetBSF(this, "Floor");
          this.getPurchaseList();
          this.onLocation({
            BuildName: this.filterForm.BuildName,
            Specialty: this.filterForm.Specialty,
            Floor: val
          });
        }
      }
    },
    // 专业
    "filterForm.Specialty": {
      handler(val, oldval) {
        if (val != "") {
          dataResetBSF(this, "Specialty");
          getFloorList(this, GetFloorbyBuilding);
          this.getPurchaseList();
          this.onLocation({
            BuildName: this.filterForm.BuildName,
            Specialty: val
          });
        }
      }
    },
    // 楼栋
    "filterForm.BuildName": {
      handler(val, oldval) {
        if (val != "") {
          dataResetBSF(this, "BuildName");
          getSpecialtyList(this, GetSpecialtybyBuilding);
          if (val == "全部") {
            val = "";
          }
          this.getPurchaseList();
          this.onLocation({ BuildName: val });
        }
      }
    }
  }
};
</script>
<style scoped>
.model-container {
  width: 98%;
  height: 100%;
  padding: 0 !important;
  z-index: 90;
}
/* 滚动条的宽度 */
::-webkit-scrollbar {
  width: 10px;
  height: 10px;
  background-color: transparent;
}

/* 滚动条的滑块 */
::-webkit-scrollbar-thumb {
  background-color: #a1a3a9;
  border-radius: 6px;
}
</style>