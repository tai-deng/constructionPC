<!-- communication沟通管理 -->
<template>
  <div class="container-communication1">
    <div class="leftBox">
      <div class="box-card">
        <div class="title">
          <i class="el-icon-menu icon"></i>
        </div>
          <!-- 模型box -->
        <div class="model-container">
          <div ref="modelContainer" class="model-container"></div>
        </div>
      </div>
    </div>
    <div class="rightBox">
      <div class="box-card">
        <!-- 详情 -->
        <div class="detail" v-show="alteration">
          <div class="titleBg notice">
            详情
            <i class="el-icon-close" @click="close()"></i>
          </div>
          <el-row>
            <el-col :span="24">
              <el-form ref="form" :model="form" label-width="80px">
                <el-form-item label="主题:" >
                  <div class="info">{{form.Subject}}</div>
                </el-form-item>
                <el-form-item label="类型:">
                  <div class="info">{{form.ComType}}</div>
                </el-form-item>
                <el-form-item label="问题描述:">
                  <div class="info">{{form.Description}}</div>
                </el-form-item>
                <el-form-item label="视点:">
                  <div class="imgWrap">
                    <img v-if="listViewpoints.length === 0" src="../../../assets/imgs/img.png" alt>
                    <img v-else :src="listViewpoints[0].Snapshot" alt>
                  </div>
                </el-form-item>
                <el-form-item label="凭证:">
                  <div class="imgWrap">
                    <img v-if="PhotoList.length === 0" src="../../../assets/imgs/img.png" alt>
                    <template v-else>
                      <img v-for="(item, index) in PhotoList" :key="index" :src="item" alt>
                    </template>
                  </div>
                </el-form-item>
                <el-form-item label="构件关联:">
                 <span class="relevance" v-if="form.isRelation">
                    <img src="../../../assets/imgs/unRelation.png">
                  </span>
                   <span class="relevance" v-else  >
                    <img src="../../../assets/imgs/allRelation.png">
                  </span>
                </el-form-item>
                <el-form-item label="状态:"></el-form-item>
                <div class="item">
                  <el-form-item>
                    <el-steps align-center :active="stepsActive">
                      <el-step v-for="(item, index) in listFlow" :key="index" :title="item.OrgName" :description="item.DeptName"></el-step>
                      <!-- <el-step title="设计单位" description="工程部"></el-step>
                      <el-step title="建设单位" description="工程部"></el-step>
                      <el-step title="施工单位" description="工程部"></el-step> -->
                    </el-steps>
                  </el-form-item>
                </div>
                <div class="item">
                  <el-form-item>
                    <ul class="uploadImg authentication">
                      <li class="imgWrap">
                        <img src="../../../assets/imgs/img.png" alt>
                        <span>认证照片</span>
                      </li>
                      <li class="imgWrap">
                        <img src="../../../assets/imgs/img3.jpg" alt>
                        <span>认证照片</span>
                      </li>
                      <li class="imgWrap">
                        <img src="../../../assets/imgs/img6.png" alt>
                        <span>认证照片</span>
                      </li>
                      <li class="imgWrap">
                        <div class="upload">
                          <el-upload
                            action="https://jsonplaceholder.typicode.com/posts/"
                            list-type="picture-card"
                            :on-preview="handlePictureCardPreview1"
                            :on-remove="handleRemove1"
                            multiple
                            :limit="3"
                          >
                            <i class="el-icon-plus"></i>
                          </el-upload>
                          <span>认证照片</span>
                        </div>
                        <el-dialog :visible.sync="dialogVisible1">
                          <img width="100%" :src="dialogImageUrl1" alt>
                        </el-dialog>
                      </li>
                    </ul>
                  </el-form-item>
                </div>
                <el-form-item>
                  <div class="btn">
                    <el-button type="primary" @click="onSubmit">提交</el-button>
                  </div>
                </el-form-item>
              </el-form>
            </el-col>
          </el-row>
        </div>
      </div>
    </div>
  </div>
</template>

<script type='textecmascript-6'>
import { 
  GetDetail,  //获取沟通详情
  GetComTypeList,  //获取沟通类型列表
  GetDefaultModelId,  //获取默认模型
} from '@/api/api.js'
export default {
  data() {
    return {
      projectId: localStorage.getItem('projectid'),  //项目Id
      defaultModelID: 0, //模型ID
      data: "",
      form: {},
      alteration: true, //详情弹框
      dialogImageUrl1: "", //认证照片
      dialogVisible1: false,//认证照片列表
      communicateId: null,  // 沟通项ID
      PhotoList: [], //图片详情
      listFlow: [], //工作流
      listViewpoints: [],  // 视点数据
      view_point: sessionStorage.getItem('e'), //视点路径
      fileext: '',  //图片格式
      stateStr: [], //视点快照图路径
      Snapshot: [],  //小图片数据视点图片详情
    };
  },
  computed:{
    stepsActive(){
      if(this.listFlow.length){
        let active = 0
        this.listFlow.forEach((item,index) => {
          if(item.status === '0'){
            active = index
          }
        })
        return active
      } else {
        return 0
      }
    }
  },
  created(){
    this.getCommunicatItem() // 获取沟通具体项
    this.GetCommunicationDetail() // 沟通详情列表
    this.getModelId()  //获取模型ID
    // this.createViewPoint()  //模型视点
  },
  mounted(){
    // this.createViewPoint()  //模型视点
  },
  methods: {
    close() {
      //关闭详情
      this.$router.go(-1);
    },
    onSubmit() {
      //表单提交
      console.log("submit!");
    },
    // 认证照片
    handleRemove1(file, fileList) {
      //图标删除
      console.log(file, fileList);
    },
    handlePictureCardPreview1(file) {
      //认证照片列表
      this.dialogImageUrl1 = file.url;
      this.dialogVisible1 = true;
    },
    //获取沟通具体项
    getCommunicatItem(){
      this.communicateId = this.$route.query.id
      console.log(this.communicateId)
    },
    //创建视点
    createViewPoint() {
      console.log('33333')
      this.$util.getDomLocation(this, "modelContainer").then(res => {
        this.modelBox({
          isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示 false:隐藏模型
          isLoadModel: true, //是否加载模型 true：加载模型，如果已经加载，不会重新加载， false:卸载模型
          top: res.top, //距离顶部距离‘px'
          left: res.left, //距离左边距离‘px'
          width: res.width, //模型宽‘px'
          height: res.height, //模型高 ‘px'
          zIndex: 100, //模型层级
          background: "",
          ElementIDs: [], // 所有要显示的构件数组，包括半隐藏构件
          highLightElementIDs: [], // 高亮显示的构件
          functionNumber: [35] // 需要模型调用的函数编号数组
        });
      });
      setTimeout(()=>{
        this.view_point = sessionStorage.getItem('e')
        this.fileext = this.view_point.slice(10,14).replace('/','.')
        console.log(this.view_point)
        // this.uploadBase64Img()
        this.currentState()

      },1000)
    },
     //获取当前模型的浏览状态，用于保存后恢复模型状态
    currentState() {
      this.$util.getDomLocation(this, "modelContainer").then(res => {
        this.modelBox({
          isShowModel: true, //是否显示模型 true:显示模型，如果模型已加载，则显示 false:隐藏模型
          isLoadModel: true, //是否加载模型 true：加载模型，如果已经加载，不会重新加载， false:卸载模型
          top: res.top, //距离顶部距离‘px'
          left: res.left, //距离左边距离‘px'
          width: res.width, //模型宽‘px'
          height: res.height, //模型高 ‘px'
          zIndex: 100, //模型层级
          background: "",
          ElementIDs: [], // 所有要显示的构件数组，包括半隐藏构件
          highLightElementIDs: [], // 高亮显示的构件
          functionNumber: [36] // 需要模型调用的函数编号数组
        });
      });
      setTimeout(() => {
        this.uploadBase64Img();
      }, 1000);
    },

     //上传Base64String 图片
    async uploadBase64Img() {
      let upload_base64_img = await this.Request(UploadBase64Img({fileext: this.fileext, Base64Photo: this.view_point}));
      if (upload_base64_img.StatusCode === 200) {
        if (upload_base64_img.Detiel.length != 0) {
          this.upload_base64_img = upload_base64_img.Detiel
          // this.currentState()
          this.viewPointList.push({
            ProjectID: this.projectId,
            ModelID: this.defaultModelID,
            State: this.stateStr,
            Snapshot: this.Snapshot[0]
          })
        } else {
          this.$message({ type: "error", message: "无数据", center: "true" })
        }
      } else {
        this.$message({type: "error",message: upload_base64_img.message ? upload_base64_img : "后台异常",center: "true"})
      }
    },

    /**
     * api
     */
    //模型ID
    async getModelId() {
      //获取默认模型ID
      let defaultModelId = await this.Request(GetDefaultModelId({projectId: this.projectId}))
      if(defaultModelId.StatusCode == 200){
        this.defaultModelID = defaultModelId.Result
      }else{
        this.$message({type:'error',message:defaultModelId.message?defaultModelId.message:'后台异常',center:'true'})
      }
    },
    //获取沟通管理详情
    async GetCommunicationDetail(){
      let id = this.communicateId
      if(id){
        let Com_Detail = await this.Request(GetDetail({communicateId: id}))
        console.log(Com_Detail)
        if(Com_Detail.StatusCode === 200){
          this.form = Com_Detail.Detiel[0].Communicate
          this.PhotoList = Com_Detail.Detiel[0].PhotoList
          this.listFlow = Com_Detail.Detiel[0].listFlow
          this.listViewpoints = Com_Detail.Detiel[0].listViewpoints
          let stateStrlist = Com_Detail.Detiel[0].listViewpoints
          this.stateStr =[]
          this.Snapshot = []
          stateStrlist.forEach(item=>{
            this.stateStr.push(item.State)
            this.Snapshot.push(item.Snapshot)
          })     
        }else{
          this.$message({
            type: 'error',
            message: Com_Detail.Message,
            center: 'true'
          })
        }
      }

    },


  }
};
</script>
<style lang='stylus' rel='stylesheet/stylus'>
.container-communication1 {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
}

.container-communication1 .el-form-item {
  width: 100%;
  height: auto !important;
}

.container-communication1 .avatar-uploader .el-upload {
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.container-communication1 .el-upload--picture-card {
  background: #F8F8F8 !important;
}

.container-communication1 .avatar-uploader .el-upload:hover {
  border-color: #409EFF;
}

.container-communication1 .avatar-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 145px;
  height: auto;
  text-align: center;
}

.container-communication1 .avatar {
  width: 145px;
  height: auto;
  display: block;
}

.container-communication1 .el-form-item__content .tip {
  color: #999999;
  font-size: 18px;
  padding-left: 10px;
  display: inline-block;
  vertical-align: bottom;
}
..el-form-item{margin-bottom:15px !important;}
.container-communication1 .item .el-form-item__content {
  margin-left: 0 !important;
}

.container-communication1 .upload {
  display: inline-block;
  text-align: center;
}

.container-communication1 .authentication {
  width: 100%;
  display: flex;
}

.container-communication1 .el-step__title.is-process {
  font-weight: normal;
}

.container-communication1 .imgWrap {
  width: 25%;
  float: left;
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
}

.container-communication1 .imgWrap img, .el-upload--picture-card {
  width: 130px;
  height: 100px;
  line-height: 100px;
}

.container-communication1 .workflowBox {
  display: flex;
  flex-flow: row;
  align-items: center;
  float: left;
  margin: -20px 0 0 -80px;
}

.container-communication1 .info {
  color: #333;
  font-size: 18px;
  text-align: left;
}

.container-communication1 .workflowBox .workflow1 {
  width: 156px;
  margin-right: 10px;
}

.container-communication1 .workflowBox .add {
  width: 30px;
  height: 30px;
  border: 1px solid #435089;
  display: flex;
  align-items: center;
  justify-content: center;
}

.container-communication1 .workflowBox .add i {
  color: #435089;
  font-size: 18px;
}

.container-communication1 .el-select .el-input__suffix {
  width: 0.666667rem;
  background: #435089;
  border-radius: 0 0.066667rem 0.066667rem 0;
  right: 0 !important;
}

.container-communication1 .el-select input {
  background: #fff !important;
}

.container-communication1 .el-step.is-horizontal .el-step__line {
  top: 0.25rem;
  background: #979797;
  height: 1px;
}

.container-communication1 .relevance {
  width: 64px;
  height: 40px;
  border: 1px solid #E5E5E5;
  background: #F8F8F8;
  display: flex;
  align-items: center;
  justify-content: center;
}

.container-communication1 .btn {
  padding: 10px 25% 0px 5%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.container-communication1 .el-step__icon.is-text {
  width: 40px;
  height: 40px;
  border: 1px solid #E5E5E5;
  background: #ddd;
}

.container-communication1 .el-step__line-inner {
  border-width: 0 !important;
}

.container-communication1 .el-step__main div {
  color: #333 !important;
}

.container-communication1 .el-button {
  width: 100px;
  color: #fff;
}

.container-communication1 .el-button--default {
  background: #999999;
}

.container-communication1 .el-button--default:focus, .container-communication1 .el-button--default:hover {
  background: #999999;
  color: #fff;
}

.container-communication1 .el-button--primary {
  background: #4775CA;
}

.container-communication1 .el-button--primary:focus, .el-button--primary:hover {
  background: #4775CA;
  color: #fff;
}

// 图标颜色
.container-communication1 .icon {
  color: #ffa147;
}

.container-communication1 .titleBg {
  background: #44508a;
}

.container-communication1 .detail {
  margin-bottom: 26px;
}

.container-communication1 .el-row .el-col-24 {
  font-size: 22px;
  color: #28292b;
}

.container-communication1 .detail .el-row .el-col-24 {
  margin: 20px 0px 0px 0px;
}

.container-communication1 .notice {
  color: #fff;
  font-size: 20px;
  height: 40px;
  line-height: 40px;
  display: flex;
  justify-content: center;
  position: relative;
}

.container-communication1 .notice i {
  font-size: 20px;
  position: absolute;
  right: 15px;
  line-height: 40px;
  cursor: pointer;
}

.container-communication1 .el-step__icon-inner {
  color: #fff;
  font-size: 20px;
}

.container-communication1 .el-step__head {
  border-color: #979797 !important;
}

.container-communication1 .el-step.is-center .el-step__line {
  left: 70%;
  right: -30%;
}

.container-communication1 .el-step__head.is-finish .is-text {
  background: #4775CA;
}

.container-communication1 .el-step__head.is-finish .el-step__icon-inner {
  color: #fff !important;
}

.container-communication1 .el-form {
  padding: 0 0px;
}

.container-communication1 .el-input {
}

.container-communication1 .el-input input, .container-communication1 .el-textarea .el-textarea__inner {
  background: #F8F8F8;
  color: #666;
  font-size: 16px;
}

.container-communication1 .el-input--prefix .el-input__inner {
  padding-left: 15px !important;
  padding-right: 15px !important;
}

.container-communication1 .el-textarea .el-textarea__inner {
  min-height: 120px !important;
}

.container-communication1 .el-select .el-input__inner {
  color: #333;
}

.container-communication1 .el-form-item__label {
  color: #333333;
  font-size: 18px;
  width:130px !important;
}
.el-form-item{margin-bottom:15px;}
.container-communication1 .leftBox, .container-communication1 .rightBox {
  width: 50%;
  height: 100%;
  position: absolute;
  top: 0;
  background: #f5f6fa;
}

.container-communication1 .leftBox {
  left: 0;
}
.container-communication1{
  // margin:10px;
}
.container-communication1 .rightBox {
  right: 0;
}

.container-communication1 .leftBox .box-card {
  width: calc(100% - 30px);
  height: calc(100% - 42px);
  margin: 20px 10px 20px 20px;
}

.container-communication1 .rightBox .box-card {
  width: calc(100% - 30px);
  height: calc(100% - 42px);
  padding: 0px;
  background: #f5f6fa;
  border: none;
  box-shadow: none;
  background: #fff;
  overflow: auto;
}
//模型样式
.model-container {
  width: 98%;
  height: 90%;
  padding: 0 !important;
  z-index:90;
  margin-top: 50px;
}
</style>



