<!-- dataDictionary -->
<template>
  <div class='container-data-dictionary'>
    <div class='wrapper' id="container_dictionary">
      <el-tabs
        :tab-position="tabPosition"
        style="height: 100%;"
      >
        <el-tab-pane v-for="(item, index) in labList" :key="index" :label="item.name">
          <!-- <engineeringclass style="box-sizing: border-box"></engineeringclass> -->
          <component :is="item.comName"></component>
        </el-tab-pane>
        <!-- <el-tab-pane label="工程类型"><engineeringclass style="box-sizing: border-box"></engineeringclass></el-tab-pane>
        <el-tab-pane label="风险类型"><vantureclass style="box-sizing: border-box"></vantureclass></el-tab-pane>
        <el-tab-pane label="变更类型"><modifyclass style="box-sizing: border-box"></modifyclass></el-tab-pane>
        <el-tab-pane label="沟通类型"><consulationclass style="box-sizing: border-box"></consulationclass></el-tab-pane> -->
      </el-tabs>

    </div>
  </div>
</template>

<script type='textecmascript-6'>
import engineeringclass from './components/engineeringClass';
import modelclass from './components/modelClass'
import vantureclass from './components/ventureClass'
import modifyclass from './components/modifyClass'
import consulationclass from './components/consulationClass'
import { GetDictInfoList } from '@/api/api.js'
import methods from '../../model/module/methods';
export default {
  data() {
    return {
      tabPosition: "left",
      // DICode: "工程类型管理"
      labList: [
        {name: '模型分类', comName: 'modelclass'},
        {name: '工程类型', comName: 'engineeringclass'},
        {name: '风险类型', comName: 'vantureclass'},
        {name: '变更类型', comName: 'modifyclass'},
        {name: '沟通类型', comName: 'consulationclass'}
      ]
    };
  },
  components: {
    engineeringclass,
    modelclass,
    vantureclass,
    modifyclass,
    consulationclass
  },
  created(){
    // this.DictInfoList()
  },
  methods: {
    /**
     * api
     */
    // 获取数据字典列表接口
    // async DictInfoList(){
    //   let dicInfo = await this.Request(GetDictInfoList({DICode: this.DICode}))
    //   console.log(dicInfo)
    // }
  }
};
</script>
<style lang='stylus' scoped rel='stylesheet/stylus'>
.container-data-dictionary {
  width: 100%;
  height: 100%;
}
</style>
<style lang='stylus' rel='stylesheet/stylus'>
@import '../../../assets/stylus/variable'
#container_dictionary,
#container_dictionary .el-tabs__content,
#container_dictionary .el-tab-pane {
  height 100%;
}
 .container-data-dictionary #container_dictionary .el-tabs__item {
   width: 280px;
   text-align: center;
   font-size $font-size-16;

 }
 #container_dictionary .el-tabs__item.is-active {
   color: #fff;
   background-color #4775CA;
 
 }
 .container-data-dictionary #container_dictionary .el-tabs__item:after {
  
  position: absolute;
   top:0;
   right:0px;
   content: '';
   width 0px;
   height 0px;
   border: 20px solid transparent;
   border-right:20px solid #fff;
   z-index 100;
 }
 .container-data-dictionary #container_dictionary .el-tabs__header {
   margin-right: 0;
 }
</style>