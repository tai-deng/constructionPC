<!-- 信息配置information -->
import { async } from 'q';
<template>
  <div class="container-information">
    <div class="wrapper">
      <div class="left">
        <div class="left-contain">
          <el-form :model="formData" :rules="rules" ref="formData">
            <!-- 下拉菜单 -->
            <el-form-item prop="projectType">
              <div class="project-type">
                <span class="project-title">工程类型</span>
                <el-select v-model="formData.projectType" placeholder="请选择工程类型">
                  <el-option
                    v-for="item in projectTypeList"
                    :key="item.id"
                    :label="item.label"
                    :value="item.id"
                  ></el-option>
                </el-select>
              </div>
            </el-form-item>
            <!-- 项目地址 -->
            <div class="project-address">
              <p class="project-address-title">项目选址</p>
              <div class="address-select">
                <!-- 省 -->
                <el-form-item prop="province">
                  <el-select v-model="formData.province" placeholder="选择省">
                    <el-option
                      v-for="item in provinceList"
                      :key="item.id"
                      :label="item.label"
                      :value="item.label"
                    ></el-option>
                  </el-select>
                </el-form-item>
                <!-- 市 -->
                <el-form-item prop="city">
                  <el-select v-model="formData.city" placeholder="选择市" class="center-select">
                    <el-option
                      v-for="item in cityList"
                      :key="item.id"
                      :label="item.label"
                      :value="item.label"
                    ></el-option>
                  </el-select>
                </el-form-item>
                <!-- 区县 -->
                <el-form-item prop="town">
                  <el-select v-model="formData.town" placeholder="选择区/镇">
                    <el-option
                      v-for="item in townList"
                      :key="item.id"
                      :label="item.label"
                      :value="item.label"
                    ></el-option>
                  </el-select>
                </el-form-item>
              </div>

              <!-- 详细地址 -->
              <el-form-item prop="detailedAddress">
                <el-input
                  :maxlength="100"
                  type="textarea"
                  :rows="4"
                  resize="none"
                  placeholder="请输入详细地址"
                  v-model="formData.detailedAddress"
                ></el-input>
              </el-form-item>
            </div>

            <!-- 总建筑面积 -->
            <div class="input-building">
              <p>
                总建筑面积
                <span>（如果BIM模型中设置了房间属性，将自动识别建筑面积）</span>
              </p>
              <div class="input-number">
                <el-form-item prop="area">
                  <el-input type="number" placeholder="请输入建筑面积数" v-model="formData.area">
                    <template slot="append">㎡</template>
                  </el-input>
                </el-form-item>
              </div>
            </div>
            <!-- 建筑单体 -->
            <div class="input-building">
              <p>
                建筑单体
                <span>（自动识别模型上传中建筑单体数量）</span>
              </p>
              <div class="input-number">
                <el-form-item prop="monomer">
                  <el-input type="number" placeholder="请输入单体数量" v-model="formData.monomer">
                    <template slot="append">栋</template>
                  </el-input>
                </el-form-item>
              </div>
            </div>

            <!-- 表格 -->
            <div class="tab">
              <el-table :data="tableData" style="width: 100%">
                <el-table-column label="栋号">
                  <template slot-scope="scope">
                    <el-input :ref="`focus${scope.column.id}`" @blur="onBlur(scope.$index, scope.row)" readonly ondblclick="this.readOnly=false" v-model="scope.row.buildingNumber" placeholder="输入栋号"></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="area" label="建筑面积㎡">
                  <template slot-scope="scope">
                    <el-input  readonly ondblclick="this.readOnly=false" :ref="`focus${scope.column.id}`" @blur="onBlur(scope.$index, scope.row)"  type="number" v-model="scope.row.area" placeholder="输入面积"></el-input>
                  </template>
                </el-table-column>
                <el-table-column  label="地上层数">
                  <template slot-scope="scope">
                    <el-input  readonly ondblclick="this.readOnly=false" :ref="`focus${scope.column.id}`" @blur="onBlur(scope.$index, scope.row)"  type="number" v-model="scope.row.layerNumberUP" placeholder="输入层数"></el-input>
                  </template>
                </el-table-column>
                <el-table-column  label="地下层数">
                  <template slot-scope="scope">
                    <el-input  readonly ondblclick="this.readOnly=false" :ref="`focus${scope.column.id}`" @blur="onBlur(scope.$index, scope.row)"  type="number" v-model="scope.row.layerNumberDown" placeholder="输入层数"></el-input>
                  </template>
                </el-table-column>
              </el-table>
            </div>
            <!-- 提交 -->
            <div class="sub">
              <el-button type="warning" @click="isSub('formData')">提&nbsp;交</el-button>
            </div>
          </el-form>
        </div>
      </div>
      <div
        class="right"
        ref="allmap"
        v-loading="!isMapLoaded"
        element-loading-text="定位中..."
        element-loading-spinner="el-icon-loading"
        element-loading-background="rgba(0, 0, 0, 0.6)"
        spinner='spinner'
        customClass='spinner'
      ></div>
    </div>
  </div>
</template>

<script type='textecmascript-6'>
export default {
  data() {
    return {
      projectTypeList: [
        //工程类型数组
        {
          id: "0",
          label: "建筑工程0"
        },
        {
          id: "1",
          label: "建筑工程1"
        },
        {
          id: "2",
          label: "建筑工程2"
        },
        {
          id: "3",
          label: "建筑工程3"
        },
        {
          id: "4",
          label: "建筑工程4"
        }
      ],
      provinceList: [
        //省份数组
        {
          id: "0",
          label: "湖南省"
        },
        {
          id: "1",
          label: "河北省"
        },
        {
          id: "2",
          label: "北京"
        },
        {
          id: "3",
          label: "江西省"
        }
      ],
      cityList: [
        // 市数组
        {
          id: "0",
          label: "长沙市"
        },
        {
          id: "1",
          label: "株洲市"
        },
        {
          id: "2",
          label: "岳阳市"
        },
        {
          id: "3",
          label: "合肥市"
        }
      ],
      townList: [
        // 区/镇数组
        {
          id: "0",
          label: "望城"
        },
        {
          id: "1",
          label: "开福区"
        },
        {
          id: "2",
          label: "宁乡"
        },
        {
          id: "3",
          label: "3区"
        }
      ],
      formData: {
        //表单提交对象
        projectType: "", //已选择的工程类型
        province: "", //已选择的省份
        city: "", //已选择的市
        town: "", //已选择的区/镇
        detailedAddress: "", //详情地址
        area: "", //建筑面积
        monomer: "", //建筑单体数
        buildList: [] //建筑集合
      },
      rules: {
        //表单效验
        projectType: [
          { required: true, message: "请选择工程类型", trigger: "change" }
        ],
        province: [{ required: true, message: "请选择省", trigger: "change" }],
        city: [{ required: true, message: "请选择市", trigger: "change" }],
        town: [{ required: true, message: "请选择区/镇", trigger: "change" }],
        detailedAddress: [
          { required: true, message: "请输入详细地址", trigger: "blur" }
        ],
        area: [
          { required: true, message: "请输入建筑面积数", trigger: "blur" }
        ],
        monomer: [
          { required: true, message: "请输入建筑单体数", trigger: "blur" }
        ]
      },
      tableData: [
        {
          buildingNumber: "A1",
          area: "2000",
          layerNumberUP: "50",
          layerNumberDown: "5"
        },
        {
          buildingNumber: "A2",
          area: "5000",
          layerNumberUP: "60",
          layerNumberDown: "2"
        },
        {
          buildingNumber: "A3",
          area: "9000",
          layerNumberUP: "100",
          layerNumberDown: "3"
        }
      ],
      map: {}, //百度地图实例
      isMapLoaded: false, //地图是否加载完成
      
    };
  },
  mounted() {
    this.getMap();
  },
  methods: {
    /** * 事件 */
    /**
     * 提交
     */
    isSub(formName) {
      this.$refs[formName].validate(valid => {
        console.log(formName);
        if (valid) {
          this.$dialog
            .confirm({
              title: "提示",
              className: "sub-dialog",
              message: "是否确定提交？"
            })
            .then(() => {
              console.log("确定");
            })
            .catch(() => {
              console.log("取消");
            });
        } else {
          this.$message({
            type: "error",
            message: "选择或输入不能为空",
            center: "true"
          });
          return false;
        }
      });
    },
    /**
     * 双击编辑单元格
     */
    editorCell(index, row,column,scope) {
      console.log(index, row,column,scope);
      console.log(this.tableData[index][`isCaneditor${index}`]);
      this.tableData[index][`isCaneditor${index}`] = true
      //点开input自动获取焦点
      this.$nextTick(()=>{
        this.$refs[`focus${column.id}`].focus()
      })
    },
    /**
     * 失去焦点事件
     */
    onBlur(index, row){
      console.log(index, row)
      console.log(this.tableData)
      this.tableData[index][`isCaneditor${index}`] = false;
    },

    /**方法 */
    /**
     * 百度地图控件
     */
    async getMap() {
      /* eslint-disable */
      let map = new BMap.Map(this.$refs.allmap); // 创建Map实例
      this.map = map;
      this.centerAndZoomByAddress("北京", map, 10);
      //setTimeout(in)
      //获取用户当前坐标
      let _userCurrentLocation = await this.getUserCurrentLocation(BMap);
      // 定位到城市
      this.centerAndZoomByAddress(_userCurrentLocation.address.city, map, 10);
      // 定位当前地址
      //
      // geolocation.getCurrentPosition(r=>{
      //   console.log(geolocation.getStatus())
      //   console.log(r)
      // })
      // map.centerAndZoom(new BMap.Point(114.3, 30.6), 11); // 初始化地图,设置中心点坐标（经纬度/城市的名称）和地图级别
      // map.addControl(
      //   new BMap.MapTypeControl({
      //     //添加地图类型控件
      //     mapTypes: [BMAP_NORMAL_MAP, BMAP_HYBRID_MAP]
      //   })
      // );
      // map.setCurrentCity("武汉"); // 设置地图显示的城市 此项是必须设置的
      map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放 //map.setMapStyle({style:'midnight'});//地图风格
      console.log(map.getCenter());
    },
    /**
     * 定位 到省市区
     * address：省市区
     * map:地图实例
     * zoom：(number)  9：定位到省 10:定位到城市 12~13：定位到区、县
     */
    centerAndZoomByAddress(address, map, zoom) {
      map.centerAndZoom(address, zoom);
    },

    /**
     * 获取用户当前位置
     * BMap:百度地图实例
     */
    async getUserCurrentLocation(BMap) {
      let geolocation = new BMap.Geolocation(); // 返回用户当前的位置。此方法利用浏览器的geolocation接口获取用户当前位置，不支持的浏览器将无法获取。
      return new Promise((resolve, reject) => {
        geolocation.getCurrentPosition(location => {
          console.log(location);
          this.isMapLoaded = true; //地图加载完成
          switch (geolocation.getStatus()) {
            case BMAP_STATUS_SUCCESS: //检索成功。对应数值“0”
              resolve(location);
              break;
            case BMAP_STATUS_CITY_LIST:
              console.log("城市列表。对应数值“1”");
              reject(null);
              break;
            //预留异常处理
            case BMAP_STATUS_UNKNOWN_LOCATION:
              console.log("位置结果未知。对应数值“2”");
              reject(null);
              break;
            case BMAP_STATUS_UNKNOWN_ROUTE:
              console.log("导航结果未知。对应数值“3”");
              reject(null);
              break;
            case BMAP_STATUS_INVALID_KEY:
              console.log("非法密钥。对应数值“4”");
              reject(null);
              break;
            case BMAP_STATUS_INVALID_REQUEST:
              console.log("非法请求。对应数值“5”");
              reject(null);
              break;
            case BMAP_STATUS_PERMISSION_DENIED:
              console.log("没有权限。对应数值“6”");
              reject(null);
              break;
            case BMAP_STATUS_SERVICE_UNAVAILABLE:
              console.log("服务不可用。对应数值“7”");
              reject(null);
              break;
            case BMAP_STATUS_TIMEOUT:
              console.log("超时。对应数值“8”");
              reject(null);
              break;
          }
        });
      });
    }
  },
  computed: {
    /**返回省份选择 */
    upProvince() {
      return this.formData.province;
    },
    /**返回已选城市 */
    upCity() {
      return this.formData.city;
    },
    /**返回已选城市 */
    upTown() {
      return this.formData.town;
    }
  },
  // 侦听器
  watch: {
    /**侦听省份选择 */
    upProvince(address) {
      this.centerAndZoomByAddress(address, this.map, 9);
    },
    /**返回已选城市 */
    upCity(address) {
      this.centerAndZoomByAddress(address, this.map, 10);
    },
    /**返回已选区/镇 */
    upTown(address) {
      this.centerAndZoomByAddress(address, this.map, 13);
    }
  }
};
</script>
<style lang='stylus' scoped rel='stylesheet/stylus'>
@import '../../../assets/stylus/variable.styl'

.container-information
  width 100%
  height 100%
  .wrapper
    display flex
    height 100%
    .left
      width 600px
      box-shadow 1px 0px 7px 0px rgba(216,223,238,1)
      z-index 10
      .left-contain
        width 560px
        margin 20px auto
        .project-type
          width 100%
          display flex
          .project-title
            font-size $font-size-18
            font-family SourceHanSansCN-Normal
            font-weight 400
            color $font-color-10
            line-height 40px
            margin-right 20px
        .project-address
          margin-top 20px
          .project-address-title
            font-size $font-size-18
            font-family SourceHanSansCN-Medium
            font-weight 500
            color $font-color-10
            line-height $font-size-18
          .address-select
            display flex
            justify-content space-between
            margin 20px 0 0 0
        .input-building
          margin 20px 0 0 0
          p
            font-size $font-size-18
            font-family SourceHanSansCN-Medium
            font-weight 500
            color $font-color-10
            line-height $font-size-18
            span
              font-size $font-size-14
              font-family SourceHanSansCN-Medium
              color $font-color-04
              line-height $font-size-14
          .input-number
            margin-top 16px
        .tab
          margin-top 20px
          padding-top 1px
          background rgba(244, 246, 255, 1)
          border 1px solid #e6e6e6
          border-bottom none
          .cell-style
            display inline-block
            width 100%
            height 100%
        .sub
          width 100%
    .right
      flex 1
      height 100%
</style>
<style>
.container-information .el-select {
  flex: 1;
  height: 40px;
  background: rgba(255, 255, 255, 1);
  box-shadow: 0px 3px 7px 0px rgba(229, 229, 229, 1);
  border-radius: 4px;
}
.container-information .el-input--suffix .el-input__inner {
  border: none;
}
.container-information .el-input__suffix {
  background: rgba(67, 80, 137, 1);
  border-radius: 0px 4px 4px 0px;
  right: 0;
  width: 40px;
}
.container-information .el-icon-arrow-up:before {
  /* content: "\e60b"; */
  content: "\e60c";
  /* font-size: 20px; */
  color: rgba(255, 255, 255, 1);
}
.container-information .center-select {
  margin: 0 20px;
}
.input-number .el-input-group--append .el-input__inner,
.el-input-group__prepend {
  height: 40px;
  background: rgba(248, 248, 248, 1);
  border-radius: 4px;
  border: 1px solid rgba(229, 229, 229, 1);
  border-right: 1px dashed #979797;
}
.input-number .el-input-group__append {
  color: #4774c9;
}
.tab .el-table .cell {
  text-align: center;
}
.sub .el-button--warning {
  color: #fff;
  background-color: #fda143;
  border-color: #fda143;
  margin: 0 auto;
  display: inherit;
  width: 120px;
  margin-top: 170px;
  font-size: 16px;
  font-family: SourceHanSansCN-Medium;
  font-weight: 500;
}
.sub-dialog {
  width: 16%;
  /* height: 200px; */
  font-size: 30px;
}
.left-contain .el-form-item__error {
  right: 20px;
  left: initial;
}
.el-loading-spinner i,.el-loading-spinner .el-loading-text{
  font-size: 30px;
}
.tab .el-input__inner{
  height: 30px;
  border: none; 
  text-align: center;
}
.el-table td, .el-table th{
  padding: 10px 0
}
</style>
